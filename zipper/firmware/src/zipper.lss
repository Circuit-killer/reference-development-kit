
zipper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000016ce  00001762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019e  00800118  00800118  0000177a  2**0
                  ALLOC
  3 .debug_aranges 00000310  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000087c  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038fa  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001356  00000000  00000000  00005c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003465  00000000  00000000  00006f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  0000a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a45  00000000  00000000  0000a81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016b1  00000000  00000000  0000c261  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000d912  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


/**	Inaccurate software delay function to get required delay in microseconds. */
void Delay_us (unsigned int cycles)
{
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	00 00       	nop
       8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	93 c0       	rjmp	.+294    	; 0x13c <__bad_interrupt>
      16:	00 00       	nop
      18:	91 c0       	rjmp	.+290    	; 0x13c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_11>
      30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	7b c0       	rjmp	.+246    	; 0x13c <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
      84:	00 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
      96:	01 00 05 24 00 01 10 05 24 01 03 01 04 24 02 06     ...$....$....$..
      a6:	05 24 06 00 01 07 05 82 03 08 00 ff 09 04 01 00     .$..............
      b6:	02 0a 00 00 00 07 05 04 02 40 00 00 07 05 83 02     .........@......
      c6:	40 00 00                                            @..

000000c9 <LanguageString>:
      c9:	04 03 09 04                                         ....

000000cd <ManufacturerString>:
      cd:	24 03 4c 00 69 00 6d 00 65 00 20 00 4d 00 69 00     $.L.i.m.e. .M.i.
      dd:	63 00 72 00 6f 00 73 00 79 00 73 00 74 00 65 00     c.r.o.s.y.s.t.e.
      ed:	6d 00 73 00 00 00                                   m.s...

000000f3 <ProductString>:
      f3:	0e 03 5a 00 69 00 70 00 70 00 65 00 72 00 00 00     ..Z.i.p.p.e.r...
     103:	00                                                  .

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d2 e0       	ldi	r29, 0x02	; 2
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	11 e0       	ldi	r17, 0x01	; 1
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ee ec       	ldi	r30, 0xCE	; 206
     118:	f6 e1       	ldi	r31, 0x16	; 22
     11a:	02 c0       	rjmp	.+4      	; 0x120 <.do_copy_data_start>

0000011c <.do_copy_data_loop>:
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0

00000120 <.do_copy_data_start>:
     120:	a8 31       	cpi	r26, 0x18	; 24
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <.do_copy_data_loop>

00000126 <__do_clear_bss>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	a8 e1       	ldi	r26, 0x18	; 24
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a6 3b       	cpi	r26, 0xB6	; 182
     132:	b1 07       	cpc	r27, r17
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	c3 d3       	rcall	.+1926   	; 0x8be <main>
     138:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <Reconfigure_SPI_for_LMS>:
	uint8_t SPCRmask = (1 << SPE) | (1 << MSTR); // always enable SPI as Master
	uint8_t SPSRmask = 0;

	/* Determine stop bits - 1.5 stop bits is set as 1 stop bit due to hardware limitations */
	/* For SPI, determine whether format is LSB or MSB */
	if (LineCoding.CharFormat == TwoStopBits) {	
     13e:	80 91 10 01 	lds	r24, 0x0110
     142:	82 30       	cpi	r24, 0x02	; 2
     144:	11 f0       	breq	.+4      	; 0x14a <Reconfigure_SPI_for_LMS+0xc>
     146:	20 e5       	ldi	r18, 0x50	; 80
     148:	01 c0       	rjmp	.+2      	; 0x14c <Reconfigure_SPI_for_LMS+0xe>
     14a:	20 e7       	ldi	r18, 0x70	; 112
		CPOL=0, CPHA=0 Sample (Rising) Setup (Falling) SPI-Mode0 == 8 bits line coding
		CPOL=0, CPHA=1 Setup (Rising) Sample (Falling) SPI-Mode1 == 7 bits line coding
		CPOL=1, CPHA=0 Sample (Falling) Setup (Rising) SPI-Mode2 == 6 bits line coding
		CPOL=1, CPHA=1 Setup (Falling) Sample (Rising) SPI-Mode3 == 5 bits line coding
	*/
	if (LineCoding.DataBits == 5) {
     14c:	80 91 12 01 	lds	r24, 0x0112
     150:	85 30       	cpi	r24, 0x05	; 5
     152:	11 f4       	brne	.+4      	; 0x158 <Reconfigure_SPI_for_LMS+0x1a>
		SPCRmask |= ((1 << CPOL) | (1 << CPHA));
     154:	2c 60       	ori	r18, 0x0C	; 12
     156:	07 c0       	rjmp	.+14     	; 0x166 <Reconfigure_SPI_for_LMS+0x28>
	} else if (LineCoding.DataBits == 6) {
     158:	86 30       	cpi	r24, 0x06	; 6
     15a:	11 f4       	brne	.+4      	; 0x160 <Reconfigure_SPI_for_LMS+0x22>
		SPCRmask |= ((1 << CPOL) | (0 << CPHA));
     15c:	28 60       	ori	r18, 0x08	; 8
     15e:	03 c0       	rjmp	.+6      	; 0x166 <Reconfigure_SPI_for_LMS+0x28>
	} else if (LineCoding.DataBits == 7) {
     160:	87 30       	cpi	r24, 0x07	; 7
     162:	09 f4       	brne	.+2      	; 0x166 <Reconfigure_SPI_for_LMS+0x28>
		SPCRmask |= ((0 << CPOL) | (1 << CPHA));
     164:	24 60       	ori	r18, 0x04	; 4
	}


	/* Set the USART baud rate register to the desired baud rate value */
	/* also alter the SPI speed via value of baud rate */
	if        (LineCoding.BaudRateBPS == 9600) {	// 4Mhz SPI (Fosc / 2)
     166:	80 91 0c 01 	lds	r24, 0x010C
     16a:	90 91 0d 01 	lds	r25, 0x010D
     16e:	a0 91 0e 01 	lds	r26, 0x010E
     172:	b0 91 0f 01 	lds	r27, 0x010F
     176:	80 38       	cpi	r24, 0x80	; 128
     178:	35 e2       	ldi	r19, 0x25	; 37
     17a:	93 07       	cpc	r25, r19
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a3 07       	cpc	r26, r19
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b3 07       	cpc	r27, r19
     184:	29 f1       	breq	.+74     	; 0x1d0 <Reconfigure_SPI_for_LMS+0x92>
		SPCRmask |= ((0 << SPR1) | (0 << SPR0));
		SPSRmask |= (1 << SPI2X);
	} else if (LineCoding.BaudRateBPS == 14400) {	// 2Mhz SPI (Fosc / 4)
     186:	80 34       	cpi	r24, 0x40	; 64
     188:	38 e3       	ldi	r19, 0x38	; 56
     18a:	93 07       	cpc	r25, r19
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	a3 07       	cpc	r26, r19
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	b3 07       	cpc	r27, r19
     194:	29 f1       	breq	.+74     	; 0x1e0 <Reconfigure_SPI_for_LMS+0xa2>
		SPCRmask |= ((0 << SPR1) | (0 << SPR0));
		SPSRmask |= (0 << SPI2X);
	} else if (LineCoding.BaudRateBPS == 19200) {	// 1MHz SPI (Fosc / 8)
     196:	80 30       	cpi	r24, 0x00	; 0
     198:	3b e4       	ldi	r19, 0x4B	; 75
     19a:	93 07       	cpc	r25, r19
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	a3 07       	cpc	r26, r19
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	b3 07       	cpc	r27, r19
     1a4:	11 f4       	brne	.+4      	; 0x1aa <Reconfigure_SPI_for_LMS+0x6c>
		SPCRmask |= ((0 << SPR1) | (1 << SPR0));
     1a6:	21 60       	ori	r18, 0x01	; 1
     1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <Reconfigure_SPI_for_LMS+0x92>
		SPSRmask |= (1 << SPI2X);
	} else if (LineCoding.BaudRateBPS == 38400) {	// 500kHz SPI (Fosc / 16)
     1aa:	80 30       	cpi	r24, 0x00	; 0
     1ac:	36 e9       	ldi	r19, 0x96	; 150
     1ae:	93 07       	cpc	r25, r19
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	a3 07       	cpc	r26, r19
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	b3 07       	cpc	r27, r19
     1b8:	11 f4       	brne	.+4      	; 0x1be <Reconfigure_SPI_for_LMS+0x80>
		SPCRmask |= ((0 << SPR1) | (1 << SPR0));
     1ba:	21 60       	ori	r18, 0x01	; 1
     1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <Reconfigure_SPI_for_LMS+0xa2>
		SPSRmask |= (0 << SPI2X);
	} else if (LineCoding.BaudRateBPS == 57600) {	// 250kHz SPI (Fosc / 32)
     1be:	80 30       	cpi	r24, 0x00	; 0
     1c0:	31 ee       	ldi	r19, 0xE1	; 225
     1c2:	93 07       	cpc	r25, r19
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	a3 07       	cpc	r26, r19
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	b3 07       	cpc	r27, r19
     1cc:	19 f4       	brne	.+6      	; 0x1d4 <Reconfigure_SPI_for_LMS+0x96>
		SPCRmask |= ((1 << SPR1) | (0 << SPR0));
     1ce:	22 60       	ori	r18, 0x02	; 2
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <Reconfigure_SPI_for_LMS+0xa4>
		SPSRmask |= (1 << SPI2X);
	} else if (LineCoding.BaudRateBPS == 115200) {	// 125kHz SPI (Fosc / 64)
     1d4:	80 50       	subi	r24, 0x00	; 0
     1d6:	92 4c       	sbci	r25, 0xC2	; 194
     1d8:	a1 40       	sbci	r26, 0x01	; 1
     1da:	b0 40       	sbci	r27, 0x00	; 0
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <Reconfigure_SPI_for_LMS+0xa2>
		SPCRmask |= ((1 << SPR1) | (0 << SPR0));
     1de:	22 60       	ori	r18, 0x02	; 2
     1e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/*SPCRmask |= ((0 << SPR1) | (1 << SPR0)); // 500kHz SPI (Fosc / 16)
	SPSRmask |= (0 << SPI2X);*/

	SPCR = SPCRmask;
     1e2:	2c bd       	out	0x2c, r18	; 44
	SPSR = SPSRmask;
     1e4:	8d bd       	out	0x2d, r24	; 45
}
     1e6:	08 95       	ret

000001e8 <Check_many_blocks>:
}

/**	This function checks if all blocks could fit in data field.
*	If blocks will not fit, function returns TRUE. */
unsigned char Check_many_blocks (unsigned char block_size)
{
     1e8:	68 2f       	mov	r22, r24
	if (LMS_Ctrl_Packet_Rx->Header.Data_blocks > (sizeof(LMS_Ctrl_Packet_Tx->Data_field)/block_size)) 
     1ea:	e0 91 15 01 	lds	r30, 0x0115
     1ee:	f0 91 16 01 	lds	r31, 0x0116
     1f2:	88 e3       	ldi	r24, 0x38	; 56
     1f4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__udivmodqi4>
     1f8:	92 81       	ldd	r25, Z+2	; 0x02
     1fa:	89 17       	cp	r24, r25
     1fc:	10 f0       	brcs	.+4      	; 0x202 <Check_many_blocks+0x1a>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	08 95       	ret
	{
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_MANY_BLOCKS_CMD;
     202:	e0 91 13 01 	lds	r30, 0x0113
     206:	f0 91 14 01 	lds	r31, 0x0114
     20a:	84 e0       	ldi	r24, 0x04	; 4
     20c:	81 83       	std	Z+1, r24	; 0x01
     20e:	81 e0       	ldi	r24, 0x01	; 1
		return TRUE;
	}
	else return FALSE;
}
     210:	08 95       	ret

00000212 <Exp_board_detection>:

void Exp_board_detection ()
{
	unsigned char spi_data, rffe_data;
	
	Exp_board_id = EXP_BOARD_UNKNOWN;
     212:	10 92 dd 01 	sts	0x01DD, r1
	
	cbi (PORTB, SPI_NCS_0); //Enable LMS's SPI
     216:	28 98       	cbi	0x05, 0	; 5
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     21c:	0d b4       	in	r0, 0x2d	; 45
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <Exp_board_detection+0xa>
			 *  \return Response byte from the attached SPI device
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     222:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     224:	0d b4       	in	r0, 0x2d	; 45
     226:	07 fe       	sbrs	r0, 7
     228:	fd cf       	rjmp	.-6      	; 0x224 <Exp_board_detection+0x12>
				return SPDR;
     22a:	8e b5       	in	r24, 0x2e	; 46
	SPI_SendByte(0x04); //reg addr MSB
	spi_data = SPI_TransferByte(0x00); //reg data MSB
	sbi (PORTB, SPI_NCS_0); //Disable LMS's SPI
     22c:	28 9a       	sbi	0x05, 0	; 5
	
	if ((spi_data != 0x00) && (spi_data != 0xFF)) Exp_board_id = EXP_BOARD_MYRIAD1;
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	8e 3f       	cpi	r24, 0xFE	; 254
     232:	18 f4       	brcc	.+6      	; 0x23a <Exp_board_detection+0x28>
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	80 93 dd 01 	sts	0x01DD, r24
	
	rffe_data = MIPI_RFFE_Read (PA_IN_RFFE_ADDR, 0x1F);
     23a:	86 e2       	ldi	r24, 0x26	; 38
     23c:	6f e1       	ldi	r22, 0x1F	; 31
     23e:	9a d5       	rcall	.+2868   	; 0xd74 <MIPI_RFFE_Read>
	
	if (rffe_data == PA_IN_RFFE_ADDR) Exp_board_id = EXP_BOARD_MYRIAD2;
     240:	86 32       	cpi	r24, 0x26	; 38
     242:	19 f4       	brne	.+6      	; 0x24a <Exp_board_detection+0x38>
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	80 93 dd 01 	sts	0x01DD, r24
     24a:	08 95       	ret

0000024c <Main_Task>:
/** After the device is connected to a Host, this task will run periodically,
		even if the device is disconnected.
	Your application code should go here
*/
TASK(Main_Task)
{
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
	uint8_t block;
	uint16_t cmd_errors;

	if(Rx_Buffer.Elements == LMS_CTRL_PACKET_SIZE) //receveid full packet?
     25e:	80 91 62 02 	lds	r24, 0x0262
     262:	80 34       	cpi	r24, 0x40	; 64
     264:	09 f0       	breq	.+2      	; 0x268 <Main_Task+0x1c>
     266:	4a c2       	rjmp	.+1172   	; 0x6fc <__stack+0x3fd>
	{
		sbi (PORTB, LED);
     268:	2f 9a       	sbi	0x05, 7	; 5
		cmd_errors = 0;
		for (count =0; count <LMS_CTRL_PACKET_SIZE; count++) //get all packets bytes
     26a:	10 92 63 02 	sts	0x0263, r1
     26e:	0d c0       	rjmp	.+26     	; 0x28a <Main_Task+0x3e>
		{
			rx_buff[count] = Buffer_GetElement(&Rx_Buffer);
     270:	8e ed       	ldi	r24, 0xDE	; 222
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	8e d6       	rcall	.+3356   	; 0xf92 <Buffer_GetElement>
     276:	e1 2f       	mov	r30, r17
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	e8 5e       	subi	r30, 0xE8	; 232
     27c:	fe 4f       	sbci	r31, 0xFE	; 254
     27e:	80 83       	st	Z, r24

	if(Rx_Buffer.Elements == LMS_CTRL_PACKET_SIZE) //receveid full packet?
	{
		sbi (PORTB, LED);
		cmd_errors = 0;
		for (count =0; count <LMS_CTRL_PACKET_SIZE; count++) //get all packets bytes
     280:	80 91 63 02 	lds	r24, 0x0263
     284:	8f 5f       	subi	r24, 0xFF	; 255
     286:	80 93 63 02 	sts	0x0263, r24
     28a:	10 91 63 02 	lds	r17, 0x0263
     28e:	10 34       	cpi	r17, 0x40	; 64
     290:	78 f3       	brcs	.-34     	; 0x270 <Main_Task+0x24>
		{
			rx_buff[count] = Buffer_GetElement(&Rx_Buffer);
		}
		
		memset (tx_buff, 0, sizeof(tx_buff)); //fill whole tx buffer with zeros
     292:	80 e4       	ldi	r24, 0x40	; 64
     294:	e4 e6       	ldi	r30, 0x64	; 100
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	df 01       	movw	r26, r30
     29a:	1d 92       	st	X+, r1
     29c:	8a 95       	dec	r24
     29e:	e9 f7       	brne	.-6      	; 0x29a <Main_Task+0x4e>
		
		LMS_Ctrl_Packet_Tx->Header.Command = LMS_Ctrl_Packet_Rx->Header.Command;
     2a0:	a0 91 15 01 	lds	r26, 0x0115
     2a4:	b0 91 16 01 	lds	r27, 0x0116
     2a8:	e0 91 13 01 	lds	r30, 0x0113
     2ac:	f0 91 14 01 	lds	r31, 0x0114
     2b0:	8c 91       	ld	r24, X
     2b2:	80 83       	st	Z, r24
		LMS_Ctrl_Packet_Tx->Header.Data_blocks = LMS_Ctrl_Packet_Rx->Header.Data_blocks;
     2b4:	e0 91 13 01 	lds	r30, 0x0113
     2b8:	f0 91 14 01 	lds	r31, 0x0114
     2bc:	12 96       	adiw	r26, 0x02	; 2
     2be:	8c 91       	ld	r24, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	82 83       	std	Z+2, r24	; 0x02
		LMS_Ctrl_Packet_Tx->Header.Status = STATUS_BUSY_CMD;
     2c4:	e0 91 13 01 	lds	r30, 0x0113
     2c8:	f0 91 14 01 	lds	r31, 0x0114
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	81 83       	std	Z+1, r24	; 0x01
		
		switch(LMS_Ctrl_Packet_Rx->Header.Command)
     2d0:	8c 91       	ld	r24, X
     2d2:	83 32       	cpi	r24, 0x23	; 35
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <Main_Task+0x8c>
     2d6:	bd c0       	rjmp	.+378    	; 0x452 <__stack+0x153>
     2d8:	84 32       	cpi	r24, 0x24	; 36
     2da:	78 f4       	brcc	.+30     	; 0x2fa <Main_Task+0xae>
     2dc:	83 31       	cpi	r24, 0x13	; 19
     2de:	09 f4       	brne	.+2      	; 0x2e2 <Main_Task+0x96>
     2e0:	44 c0       	rjmp	.+136    	; 0x36a <__stack+0x6b>
     2e2:	84 31       	cpi	r24, 0x14	; 20
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <Main_Task+0xa0>
     2e6:	88 23       	and	r24, r24
     2e8:	d9 f0       	breq	.+54     	; 0x320 <__stack+0x21>
     2ea:	ee c1       	rjmp	.+988    	; 0x6c8 <__stack+0x3c9>
     2ec:	84 31       	cpi	r24, 0x14	; 20
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <Main_Task+0xa6>
     2f0:	62 c0       	rjmp	.+196    	; 0x3b6 <__stack+0xb7>
     2f2:	80 32       	cpi	r24, 0x20	; 32
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <Main_Task+0xac>
     2f6:	e8 c1       	rjmp	.+976    	; 0x6c8 <__stack+0x3c9>
     2f8:	92 c0       	rjmp	.+292    	; 0x41e <__stack+0x11f>
     2fa:	81 34       	cpi	r24, 0x41	; 65
     2fc:	09 f4       	brne	.+2      	; 0x300 <__stack+0x1>
     2fe:	2b c1       	rjmp	.+598    	; 0x556 <__stack+0x257>
     300:	82 34       	cpi	r24, 0x42	; 66
     302:	38 f4       	brcc	.+14     	; 0x312 <__stack+0x13>
     304:	84 32       	cpi	r24, 0x24	; 36
     306:	09 f4       	brne	.+2      	; 0x30a <__stack+0xb>
     308:	cb c0       	rjmp	.+406    	; 0x4a0 <__stack+0x1a1>
     30a:	81 33       	cpi	r24, 0x31	; 49
     30c:	09 f0       	breq	.+2      	; 0x310 <__stack+0x11>
     30e:	dc c1       	rjmp	.+952    	; 0x6c8 <__stack+0x3c9>
     310:	fc c0       	rjmp	.+504    	; 0x50a <__stack+0x20b>
     312:	82 34       	cpi	r24, 0x42	; 66
     314:	09 f4       	brne	.+2      	; 0x318 <__stack+0x19>
     316:	4e c1       	rjmp	.+668    	; 0x5b4 <__stack+0x2b5>
     318:	81 35       	cpi	r24, 0x51	; 81
     31a:	09 f0       	breq	.+2      	; 0x31e <__stack+0x1f>
     31c:	d5 c1       	rjmp	.+938    	; 0x6c8 <__stack+0x3c9>
     31e:	ad c1       	rjmp	.+858    	; 0x67a <__stack+0x37b>
		{
			case CMD_GET_INFO:
				Exp_board_detection ();
     320:	78 df       	rcall	.-272    	; 0x212 <Exp_board_detection>
				
				LMS_Ctrl_Packet_Tx->Data_field[0] = FW_VER;
     322:	e0 91 13 01 	lds	r30, 0x0113
     326:	f0 91 14 01 	lds	r31, 0x0114
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	90 87       	std	Z+8, r25	; 0x08
				LMS_Ctrl_Packet_Tx->Data_field[1] = DEV_TYPE;
     32e:	e0 91 13 01 	lds	r30, 0x0113
     332:	f0 91 14 01 	lds	r31, 0x0114
     336:	85 e0       	ldi	r24, 0x05	; 5
     338:	81 87       	std	Z+9, r24	; 0x09
				LMS_Ctrl_Packet_Tx->Data_field[2] = LMS_PROTOCOL_VER;
     33a:	e0 91 13 01 	lds	r30, 0x0113
     33e:	f0 91 14 01 	lds	r31, 0x0114
     342:	92 87       	std	Z+10, r25	; 0x0a
				LMS_Ctrl_Packet_Tx->Data_field[3] = HW_VER;
     344:	e0 91 13 01 	lds	r30, 0x0113
     348:	f0 91 14 01 	lds	r31, 0x0114
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	83 87       	std	Z+11, r24	; 0x0b
				LMS_Ctrl_Packet_Tx->Data_field[4] = Exp_board_id;
     350:	e0 91 13 01 	lds	r30, 0x0113
     354:	f0 91 14 01 	lds	r31, 0x0114
     358:	80 91 dd 01 	lds	r24, 0x01DD
     35c:	84 87       	std	Z+12, r24	; 0x0c
				
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
     35e:	e0 91 13 01 	lds	r30, 0x0113
     362:	f0 91 14 01 	lds	r31, 0x0114
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	b5 c1       	rjmp	.+874    	; 0x6d4 <__stack+0x3d5>
				break;
				
			case CMD_SI5351_WR:
				if(Check_many_blocks (2)) break;
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	3d df       	rcall	.-390    	; 0x1e8 <Check_many_blocks>
     36e:	88 23       	and	r24, r24
     370:	09 f0       	breq	.+2      	; 0x374 <__stack+0x75>
     372:	b0 c1       	rjmp	.+864    	; 0x6d4 <__stack+0x3d5>
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	c0 e0       	ldi	r28, 0x00	; 0
     378:	d0 e0       	ldi	r29, 0x00	; 0
     37a:	13 c0       	rjmp	.+38     	; 0x3a2 <__stack+0xa3>
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
				{
					if (!i2cSend(SI5351_I2C_ADDR, LMS_Ctrl_Packet_Rx->Data_field[block * 2], 1, &LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 2)])) cmd_errors++;
     37c:	81 2f       	mov	r24, r17
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	fd 01       	movw	r30, r26
     386:	e8 0f       	add	r30, r24
     388:	f9 1f       	adc	r31, r25
     38a:	09 96       	adiw	r24, 0x09	; 9
     38c:	a8 0f       	add	r26, r24
     38e:	b9 1f       	adc	r27, r25
     390:	80 ec       	ldi	r24, 0xC0	; 192
     392:	60 85       	ldd	r22, Z+8	; 0x08
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	9d 01       	movw	r18, r26
     398:	7e d3       	rcall	.+1788   	; 0xa96 <i2cSend>
     39a:	88 23       	and	r24, r24
     39c:	09 f4       	brne	.+2      	; 0x3a0 <__stack+0xa1>
     39e:	21 96       	adiw	r28, 0x01	; 1
				break;
				
			case CMD_SI5351_WR:
				if(Check_many_blocks (2)) break;
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     3a0:	1f 5f       	subi	r17, 0xFF	; 255
     3a2:	a0 91 15 01 	lds	r26, 0x0115
     3a6:	b0 91 16 01 	lds	r27, 0x0116
     3aa:	12 96       	adiw	r26, 0x02	; 2
     3ac:	8c 91       	ld	r24, X
     3ae:	12 97       	sbiw	r26, 0x02	; 2
     3b0:	18 17       	cp	r17, r24
     3b2:	20 f3       	brcs	.-56     	; 0x37c <__stack+0x7d>
     3b4:	f7 c0       	rjmp	.+494    	; 0x5a4 <__stack+0x2a5>
				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
				break;
				
			case CMD_SI5351_RD:
				if(Check_many_blocks (2)) break;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	17 df       	rcall	.-466    	; 0x1e8 <Check_many_blocks>
     3ba:	88 23       	and	r24, r24
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <__stack+0xc1>
     3be:	8a c1       	rjmp	.+788    	; 0x6d4 <__stack+0x3d5>
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	21 c0       	rjmp	.+66     	; 0x40a <__stack+0x10b>
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
				{
					LMS_Ctrl_Packet_Tx->Data_field[block * 2] = LMS_Ctrl_Packet_Rx->Data_field[block];
     3c8:	21 2f       	mov	r18, r17
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	c9 01       	movw	r24, r18
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	e0 91 13 01 	lds	r30, 0x0113
     3d6:	f0 91 14 01 	lds	r31, 0x0114
     3da:	e8 0f       	add	r30, r24
     3dc:	f9 1f       	adc	r31, r25
     3de:	a2 0f       	add	r26, r18
     3e0:	b3 1f       	adc	r27, r19
     3e2:	18 96       	adiw	r26, 0x08	; 8
     3e4:	2c 91       	ld	r18, X
     3e6:	18 97       	sbiw	r26, 0x08	; 8
     3e8:	20 87       	std	Z+8, r18	; 0x08
					if (!i2cReceive(SI5351_I2C_ADDR, LMS_Ctrl_Packet_Rx->Data_field[block], 1, &LMS_Ctrl_Packet_Tx->Data_field[1 + block * 2])) cmd_errors++;
     3ea:	09 96       	adiw	r24, 0x09	; 9
     3ec:	20 91 13 01 	lds	r18, 0x0113
     3f0:	30 91 14 01 	lds	r19, 0x0114
     3f4:	28 0f       	add	r18, r24
     3f6:	39 1f       	adc	r19, r25
     3f8:	80 ec       	ldi	r24, 0xC0	; 192
     3fa:	18 96       	adiw	r26, 0x08	; 8
     3fc:	6c 91       	ld	r22, X
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	86 d3       	rcall	.+1804   	; 0xb0e <i2cReceive>
     402:	88 23       	and	r24, r24
     404:	09 f4       	brne	.+2      	; 0x408 <__stack+0x109>
     406:	21 96       	adiw	r28, 0x01	; 1
				break;
				
			case CMD_SI5351_RD:
				if(Check_many_blocks (2)) break;
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     408:	1f 5f       	subi	r17, 0xFF	; 255
     40a:	a0 91 15 01 	lds	r26, 0x0115
     40e:	b0 91 16 01 	lds	r27, 0x0116
     412:	12 96       	adiw	r26, 0x02	; 2
     414:	8c 91       	ld	r24, X
     416:	12 97       	sbiw	r26, 0x02	; 2
     418:	18 17       	cp	r17, r24
     41a:	b0 f2       	brcs	.-84     	; 0x3c8 <__stack+0xc9>
     41c:	c3 c0       	rjmp	.+390    	; 0x5a4 <__stack+0x2a5>
				else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;

				break;
				
			case CMD_LMS_RST:
				switch (LMS_Ctrl_Packet_Rx->Data_field[0])
     41e:	18 96       	adiw	r26, 0x08	; 8
     420:	8c 91       	ld	r24, X
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	31 f0       	breq	.+12     	; 0x432 <__stack+0x133>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	90 f0       	brcs	.+36     	; 0x44e <__stack+0x14f>
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	09 f0       	breq	.+2      	; 0x430 <__stack+0x131>
     42e:	8e c0       	rjmp	.+284    	; 0x54c <__stack+0x24d>
     430:	02 c0       	rjmp	.+4      	; 0x436 <__stack+0x137>
					case LMS_RST_DEACTIVATE:
						sbi(PORTB, RESET); //high level
						break;
					
					case LMS_RST_ACTIVATE:
						cbi(PORTB, RESET); //low level
     432:	2c 98       	cbi	0x05, 4	; 5
     434:	8b c0       	rjmp	.+278    	; 0x54c <__stack+0x24d>
						break;
						
					case LMS_RST_PULSE:
						cbi(PORTB, RESET); //low level
     436:	2c 98       	cbi	0x05, 4	; 5
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	97 e2       	ldi	r25, 0x27	; 39
     43c:	03 c0       	rjmp	.+6      	; 0x444 <__stack+0x145>
/**	Inaccurate software delay function to get required delay in microseconds. */
void Delay_us (unsigned int cycles)
{
	while (cycles--)
	{
		asm volatile("nop"); 
     43e:	00 00       	nop
		asm volatile("nop"); 
     440:	00 00       	nop
		asm volatile("nop");
     442:	00 00       	nop


/**	Inaccurate software delay function to get required delay in microseconds. */
void Delay_us (unsigned int cycles)
{
	while (cycles--)
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	bf ef       	ldi	r27, 0xFF	; 255
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	9b 07       	cpc	r25, r27
     44c:	c1 f7       	brne	.-16     	; 0x43e <__stack+0x13f>
						break;
						
					case LMS_RST_PULSE:
						cbi(PORTB, RESET); //low level
						Delay_us (10*1000); //wait ~10 ms
						sbi(PORTB, RESET); //high level
     44e:	2c 9a       	sbi	0x05, 4	; 5
     450:	7d c0       	rjmp	.+250    	; 0x54c <__stack+0x24d>
			
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
				break;*/
				
			case CMD_LMS6002_WR:
				if(Check_many_blocks (2)) break;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	c9 de       	rcall	.-622    	; 0x1e8 <Check_many_blocks>
     456:	88 23       	and	r24, r24
     458:	09 f0       	breq	.+2      	; 0x45c <__stack+0x15d>
     45a:	3c c1       	rjmp	.+632    	; 0x6d4 <__stack+0x3d5>
				
				cbi (PORTB, SPI_NCS_0); //Enable LMS's SPI
     45c:	28 98       	cbi	0x05, 0	; 5
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     45e:	c0 91 15 01 	lds	r28, 0x0115
     462:	d0 91 16 01 	lds	r29, 0x0116
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	17 c0       	rjmp	.+46     	; 0x498 <__stack+0x199>
				{
					//set reg addr
					sbi(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)], 7); //set write bit
     46a:	a9 2f       	mov	r26, r25
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	aa 0f       	add	r26, r26
     470:	bb 1f       	adc	r27, r27
     472:	fe 01       	movw	r30, r28
     474:	ea 0f       	add	r30, r26
     476:	fb 1f       	adc	r31, r27
     478:	80 85       	ldd	r24, Z+8	; 0x08
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	80 87       	std	Z+8, r24	; 0x08
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     480:	0d b4       	in	r0, 0x2d	; 45
     482:	07 fe       	sbrs	r0, 7
     484:	fd cf       	rjmp	.-6      	; 0x480 <__stack+0x181>
					
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[0 + (block * 2)]); //reg addr with write bit
					
					//write reg data
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[1 + (block * 2)]); //reg data
     486:	ac 0f       	add	r26, r28
     488:	bd 1f       	adc	r27, r29
     48a:	19 96       	adiw	r26, 0x09	; 9
     48c:	8c 91       	ld	r24, X
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     490:	0d b4       	in	r0, 0x2d	; 45
     492:	07 fe       	sbrs	r0, 7
     494:	fd cf       	rjmp	.-6      	; 0x490 <__stack+0x191>
			case CMD_LMS6002_WR:
				if(Check_many_blocks (2)) break;
				
				cbi (PORTB, SPI_NCS_0); //Enable LMS's SPI
				
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     496:	9f 5f       	subi	r25, 0xFF	; 255
     498:	8a 81       	ldd	r24, Y+2	; 0x02
     49a:	98 17       	cp	r25, r24
     49c:	30 f3       	brcs	.-52     	; 0x46a <__stack+0x16b>
     49e:	33 c0       	rjmp	.+102    	; 0x506 <__stack+0x207>
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
				
				break;
				
			case CMD_LMS6002_RD:
				if(Check_many_blocks (2)) break;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	a2 de       	rcall	.-700    	; 0x1e8 <Check_many_blocks>
     4a4:	88 23       	and	r24, r24
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__stack+0x1ab>
     4a8:	15 c1       	rjmp	.+554    	; 0x6d4 <__stack+0x3d5>
			
				cbi (PORTB, SPI_NCS_0); //Enable LMS's SPI
     4aa:	28 98       	cbi	0x05, 0	; 5

				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     4ac:	a0 91 15 01 	lds	r26, 0x0115
     4b0:	b0 91 16 01 	lds	r27, 0x0116
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	22 c0       	rjmp	.+68     	; 0x4fc <__stack+0x1fd>
				{
					//write reg addr
					cbi(LMS_Ctrl_Packet_Rx->Data_field[block], 7); //clear write bit
     4b8:	29 2f       	mov	r18, r25
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	fd 01       	movw	r30, r26
     4be:	e2 0f       	add	r30, r18
     4c0:	f3 1f       	adc	r31, r19
     4c2:	80 85       	ldd	r24, Z+8	; 0x08
     4c4:	8f 77       	andi	r24, 0x7F	; 127
     4c6:	80 87       	std	Z+8, r24	; 0x08
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <__stack+0x1cb>
					
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[block]); //reg addr MSB
					
					LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 2)] = LMS_Ctrl_Packet_Rx->Data_field[block];
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	e0 91 13 01 	lds	r30, 0x0113
     4d8:	f0 91 14 01 	lds	r31, 0x0114
     4dc:	e2 0f       	add	r30, r18
     4de:	f3 1f       	adc	r31, r19
     4e0:	80 87       	std	Z+8, r24	; 0x08
					
					//read reg data
					LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 2)] = SPI_TransferByte(0x00); //reg data MSB
     4e2:	e0 91 13 01 	lds	r30, 0x0113
     4e6:	f0 91 14 01 	lds	r31, 0x0114
			 *  \return Response byte from the attached SPI device
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <__stack+0x1ed>
				return SPDR;
     4f2:	8e b5       	in	r24, 0x2e	; 46
     4f4:	e2 0f       	add	r30, r18
     4f6:	f3 1f       	adc	r31, r19
     4f8:	81 87       	std	Z+9, r24	; 0x09
			case CMD_LMS6002_RD:
				if(Check_many_blocks (2)) break;
			
				cbi (PORTB, SPI_NCS_0); //Enable LMS's SPI

				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     4fa:	9f 5f       	subi	r25, 0xFF	; 255
     4fc:	12 96       	adiw	r26, 0x02	; 2
     4fe:	8c 91       	ld	r24, X
     500:	12 97       	sbiw	r26, 0x02	; 2
     502:	98 17       	cp	r25, r24
     504:	c8 f2       	brcs	.-78     	; 0x4b8 <__stack+0x1b9>
					//read reg data
					LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 2)] = SPI_TransferByte(0x00); //reg data MSB

				}
				
				sbi (PORTB, SPI_NCS_0); //Disable LMS's SPI
     506:	28 9a       	sbi	0x05, 0	; 5
     508:	21 c0       	rjmp	.+66     	; 0x54c <__stack+0x24d>
				
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
				break;
				
			case CMD_ADF4002_WR:
				if(Check_many_blocks (3)) break;
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	6d de       	rcall	.-806    	; 0x1e8 <Check_many_blocks>
     50e:	88 23       	and	r24, r24
     510:	09 f0       	breq	.+2      	; 0x514 <__stack+0x215>
     512:	e0 c0       	rjmp	.+448    	; 0x6d4 <__stack+0x3d5>
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     514:	e0 91 15 01 	lds	r30, 0x0115
     518:	f0 91 16 01 	lds	r31, 0x0116
     51c:	22 81       	ldd	r18, Z+2	; 0x02
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	13 c0       	rjmp	.+38     	; 0x548 <__stack+0x249>
				{
					cbi (PORTB, SPI_NCS_1); //Enable ADF's SPI
     522:	2d 98       	cbi	0x05, 5	; 5
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]);
     524:	80 85       	ldd	r24, Z+8	; 0x08
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     526:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     528:	0d b4       	in	r0, 0x2d	; 45
     52a:	07 fe       	sbrs	r0, 7
     52c:	fd cf       	rjmp	.-6      	; 0x528 <__stack+0x229>
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[1 + (block*3)]);
     52e:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     530:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <__stack+0x233>
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[2 + (block*3)]);
     538:	82 85       	ldd	r24, Z+10	; 0x0a
			 *  \param Byte Byte to send through the SPI interface
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     53a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     53c:	0d b4       	in	r0, 0x2d	; 45
     53e:	07 fe       	sbrs	r0, 7
     540:	fd cf       	rjmp	.-6      	; 0x53c <__stack+0x23d>
					sbi (PORTB, SPI_NCS_1); //Disable ADF's SPI
     542:	2d 9a       	sbi	0x05, 5	; 5
				break;
				
			case CMD_ADF4002_WR:
				if(Check_many_blocks (3)) break;
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     544:	9f 5f       	subi	r25, 0xFF	; 255
     546:	33 96       	adiw	r30, 0x03	; 3
     548:	92 17       	cp	r25, r18
     54a:	58 f3       	brcs	.-42     	; 0x522 <__stack+0x223>
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[1 + (block*3)]);
					SPI_SendByte(LMS_Ctrl_Packet_Rx->Data_field[2 + (block*3)]);
					sbi (PORTB, SPI_NCS_1); //Disable ADF's SPI
				}
	
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
     54c:	e0 91 13 01 	lds	r30, 0x0113
     550:	f0 91 14 01 	lds	r31, 0x0114
     554:	90 c0       	rjmp	.+288    	; 0x676 <__stack+0x377>
				break;
				
			case CMD_PE636040_WR:
				if(Check_many_blocks (3)) break;
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	47 de       	rcall	.-882    	; 0x1e8 <Check_many_blocks>
     55a:	88 23       	and	r24, r24
     55c:	09 f0       	breq	.+2      	; 0x560 <__stack+0x261>
     55e:	ba c0       	rjmp	.+372    	; 0x6d4 <__stack+0x3d5>
     560:	10 e0       	ldi	r17, 0x00	; 0
     562:	c0 e0       	ldi	r28, 0x00	; 0
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	17 c0       	rjmp	.+46     	; 0x596 <__stack+0x297>
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
				{
					switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block*3)]) //tuner ID
     568:	81 2f       	mov	r24, r17
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	0e 94 47 0b 	call	0x168e	; 0x168e <__mulhi3>
     574:	e8 0f       	add	r30, r24
     576:	f9 1f       	adc	r31, r25
     578:	80 85       	ldd	r24, Z+8	; 0x08
     57a:	88 23       	and	r24, r24
     57c:	19 f0       	breq	.+6      	; 0x584 <__stack+0x285>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	41 f4       	brne	.+16     	; 0x592 <__stack+0x293>
     582:	02 c0       	rjmp	.+4      	; 0x588 <__stack+0x289>
					{
						case 0:
							MIPI_RFFE_Write (PA_IN_RFFE_ADDR, LMS_Ctrl_Packet_Rx->Data_field[1 + (block*3)], LMS_Ctrl_Packet_Rx->Data_field[2 + (block*3)]);
     584:	86 e2       	ldi	r24, 0x26	; 38
     586:	01 c0       	rjmp	.+2      	; 0x58a <__stack+0x28b>
							break;
						
						case 1:
							MIPI_RFFE_Write (PA_OUT_RFFE_ADDR, LMS_Ctrl_Packet_Rx->Data_field[1 + (block*3)], LMS_Ctrl_Packet_Rx->Data_field[2 + (block*3)]);
     588:	87 e2       	ldi	r24, 0x27	; 39
     58a:	61 85       	ldd	r22, Z+9	; 0x09
     58c:	42 85       	ldd	r20, Z+10	; 0x0a
     58e:	34 d3       	rcall	.+1640   	; 0xbf8 <MIPI_RFFE_Write>
     590:	01 c0       	rjmp	.+2      	; 0x594 <__stack+0x295>
							break;
							
						default:
							cmd_errors++;
     592:	21 96       	adiw	r28, 0x01	; 1
				break;
				
			case CMD_PE636040_WR:
				if(Check_many_blocks (3)) break;
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     594:	1f 5f       	subi	r17, 0xFF	; 255
     596:	e0 91 15 01 	lds	r30, 0x0115
     59a:	f0 91 16 01 	lds	r31, 0x0116
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	18 17       	cp	r17, r24
     5a2:	10 f3       	brcs	.-60     	; 0x568 <__stack+0x269>
     5a4:	e0 91 13 01 	lds	r30, 0x0113
     5a8:	f0 91 14 01 	lds	r31, 0x0114
				}

				
				/*MIPI_RFFE_Write (0x26, 2, 0xAB);
				MIPI_RFFE_Write (0x27, 2, 0xAC);*/
				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
     5ac:	cd 2b       	or	r28, r29
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <__stack+0x2b3>
     5b0:	62 c0       	rjmp	.+196    	; 0x676 <__stack+0x377>
     5b2:	5f c0       	rjmp	.+190    	; 0x672 <__stack+0x373>
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
				break;
				
			case CMD_PE636040_RD:
			
				if(Check_many_blocks (3)) break;
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	18 de       	rcall	.-976    	; 0x1e8 <Check_many_blocks>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f0       	breq	.+2      	; 0x5be <__stack+0x2bf>
     5bc:	8b c0       	rjmp	.+278    	; 0x6d4 <__stack+0x3d5>
     5be:	bb 24       	eor	r11, r11
     5c0:	cc 24       	eor	r12, r12
     5c2:	dd 24       	eor	r13, r13
     5c4:	47 c0       	rjmp	.+142    	; 0x654 <__stack+0x355>
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
				{
					LMS_Ctrl_Packet_Tx->Data_field[0 + (block * 3)] = LMS_Ctrl_Packet_Rx->Data_field[0 + (block*2)];
     5c6:	2b 2d       	mov	r18, r11
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	c9 01       	movw	r24, r18
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	0e 94 47 0b 	call	0x168e	; 0x168e <__mulhi3>
     5d4:	7c 01       	movw	r14, r24
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	e0 91 13 01 	lds	r30, 0x0113
     5de:	f0 91 14 01 	lds	r31, 0x0114
     5e2:	ee 0d       	add	r30, r14
     5e4:	ff 1d       	adc	r31, r15
     5e6:	d8 01       	movw	r26, r16
     5e8:	a2 0f       	add	r26, r18
     5ea:	b3 1f       	adc	r27, r19
     5ec:	18 96       	adiw	r26, 0x08	; 8
     5ee:	8c 91       	ld	r24, X
     5f0:	18 97       	sbiw	r26, 0x08	; 8
     5f2:	80 87       	std	Z+8, r24	; 0x08
					LMS_Ctrl_Packet_Tx->Data_field[1 + (block * 3)] = LMS_Ctrl_Packet_Rx->Data_field[1 + (block*2)];
     5f4:	e9 01       	movw	r28, r18
     5f6:	21 96       	adiw	r28, 0x01	; 1
     5f8:	e0 91 13 01 	lds	r30, 0x0113
     5fc:	f0 91 14 01 	lds	r31, 0x0114
     600:	ee 0d       	add	r30, r14
     602:	ff 1d       	adc	r31, r15
     604:	c0 0f       	add	r28, r16
     606:	d1 1f       	adc	r29, r17
     608:	88 85       	ldd	r24, Y+8	; 0x08
     60a:	81 87       	std	Z+9, r24	; 0x09
					
					switch (LMS_Ctrl_Packet_Rx->Data_field[0 + (block*2)]) //tuner ID
     60c:	18 96       	adiw	r26, 0x08	; 8
     60e:	8c 91       	ld	r24, X
     610:	88 23       	and	r24, r24
     612:	19 f0       	breq	.+6      	; 0x61a <__stack+0x31b>
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	d1 f4       	brne	.+52     	; 0x64c <__stack+0x34d>
     618:	0c c0       	rjmp	.+24     	; 0x632 <__stack+0x333>
					{
						case 0:
							LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 3)] = MIPI_RFFE_Read (PA_IN_RFFE_ADDR, LMS_Ctrl_Packet_Rx->Data_field[1 + (block*2)]);
     61a:	00 91 13 01 	lds	r16, 0x0113
     61e:	10 91 14 01 	lds	r17, 0x0114
     622:	86 e2       	ldi	r24, 0x26	; 38
     624:	68 85       	ldd	r22, Y+8	; 0x08
     626:	a6 d3       	rcall	.+1868   	; 0xd74 <MIPI_RFFE_Read>
     628:	0e 0d       	add	r16, r14
     62a:	1f 1d       	adc	r17, r15
     62c:	f8 01       	movw	r30, r16
     62e:	82 87       	std	Z+10, r24	; 0x0a
     630:	10 c0       	rjmp	.+32     	; 0x652 <__stack+0x353>
							break;
						
						case 1:
							LMS_Ctrl_Packet_Tx->Data_field[2 + (block * 3)] = MIPI_RFFE_Read (PA_OUT_RFFE_ADDR, LMS_Ctrl_Packet_Rx->Data_field[1 + (block*2)]);
     632:	00 91 13 01 	lds	r16, 0x0113
     636:	10 91 14 01 	lds	r17, 0x0114
     63a:	87 e2       	ldi	r24, 0x27	; 39
     63c:	68 85       	ldd	r22, Y+8	; 0x08
     63e:	9a d3       	rcall	.+1844   	; 0xd74 <MIPI_RFFE_Read>
     640:	0e 0d       	add	r16, r14
     642:	1f 1d       	adc	r17, r15
     644:	d8 01       	movw	r26, r16
     646:	1a 96       	adiw	r26, 0x0a	; 10
     648:	8c 93       	st	X, r24
     64a:	03 c0       	rjmp	.+6      	; 0x652 <__stack+0x353>
							break;
							
						default:
							cmd_errors++;
     64c:	08 94       	sec
     64e:	c1 1c       	adc	r12, r1
     650:	d1 1c       	adc	r13, r1
				
			case CMD_PE636040_RD:
			
				if(Check_many_blocks (3)) break;
	
				for(block = 0; block < LMS_Ctrl_Packet_Rx->Header.Data_blocks; block++)
     652:	b3 94       	inc	r11
     654:	00 91 15 01 	lds	r16, 0x0115
     658:	10 91 16 01 	lds	r17, 0x0116
     65c:	f8 01       	movw	r30, r16
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	b8 16       	cp	r11, r24
     662:	08 f4       	brcc	.+2      	; 0x666 <__stack+0x367>
     664:	b0 cf       	rjmp	.-160    	; 0x5c6 <__stack+0x2c7>
     666:	e0 91 13 01 	lds	r30, 0x0113
     66a:	f0 91 14 01 	lds	r31, 0x0114
				}

				/*LMS_Ctrl_Packet_Tx->Data_field[0] = MIPI_RFFE_Read (0x26, 2);
				LMS_Ctrl_Packet_Tx->Data_field[1] = MIPI_RFFE_Read (0x27, 2);*/
				
				if(cmd_errors) LMS_Ctrl_Packet_Tx->Header.Status = STATUS_ERROR_CMD;
     66e:	cd 28       	or	r12, r13
     670:	11 f0       	breq	.+4      	; 0x676 <__stack+0x377>
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	2e c0       	rjmp	.+92     	; 0x6d2 <__stack+0x3d3>
					else LMS_Ctrl_Packet_Tx->Header.Status = STATUS_COMPLETED_CMD;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	2c c0       	rjmp	.+88     	; 0x6d2 <__stack+0x3d3>
				break;			

			case CMD_MYRIAD_GPIO_WR:
				Exp_board_detection ();
     67a:	cb dd       	rcall	.-1130   	; 0x212 <Exp_board_detection>
			
				//GPIO0 control
				if (LMS_Ctrl_Packet_Rx->Data_field[0] & 0x01) sbi(PORTC, GPIO0);
     67c:	e0 91 15 01 	lds	r30, 0x0115
     680:	f0 91 16 01 	lds	r31, 0x0116
     684:	80 85       	ldd	r24, Z+8	; 0x08
     686:	48 2f       	mov	r20, r24
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	80 ff       	sbrs	r24, 0
     68c:	02 c0       	rjmp	.+4      	; 0x692 <__stack+0x393>
     68e:	46 9a       	sbi	0x08, 6	; 8
     690:	01 c0       	rjmp	.+2      	; 0x694 <__stack+0x395>
					else cbi(PORTC, GPIO0);
     692:	46 98       	cbi	0x08, 6	; 8
				
				//GPIO1 control	
				if (LMS_Ctrl_Packet_Rx->Data_field[0] & 0x02) sbi(PORTC, GPIO1);
     694:	41 ff       	sbrs	r20, 1
     696:	02 c0       	rjmp	.+4      	; 0x69c <__stack+0x39d>
     698:	47 9a       	sbi	0x08, 7	; 8
     69a:	01 c0       	rjmp	.+2      	; 0x69e <__stack+0x39f>
					else cbi(PORTC, GPIO1);
     69c:	47 98       	cbi	0x08, 7	; 8
				
				//GPIO2 control depends on MYriad RF version
				if (Exp_board_id == EXP_BOARD_MYRIAD2)
     69e:	80 91 dd 01 	lds	r24, 0x01DD
     6a2:	9a 01       	movw	r18, r20
     6a4:	24 70       	andi	r18, 0x04	; 4
     6a6:	30 70       	andi	r19, 0x00	; 0
     6a8:	84 30       	cpi	r24, 0x04	; 4
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <__stack+0x3b3>
				{
					if (LMS_Ctrl_Packet_Rx->Data_field[0] & 0x04) cbi(PORTD, GPIO2);
     6ac:	23 2b       	or	r18, r19
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <__stack+0x3b7>
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__stack+0x3bb>
						else sbi(PORTD, GPIO2);
				}
				else
				{
					if (LMS_Ctrl_Packet_Rx->Data_field[0] & 0x04) sbi(PORTD, GPIO2);
     6b2:	23 2b       	or	r18, r19
     6b4:	11 f0       	breq	.+4      	; 0x6ba <__stack+0x3bb>
     6b6:	5c 9a       	sbi	0x0b, 4	; 11
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <__stack+0x3bd>
						else cbi(PORTD, GPIO2);
     6ba:	5c 98       	cbi	0x0b, 4	; 11
				}
				
				//GPIO3 control
				if (LMS_Ctrl_Packet_Rx->Data_field[0] & 0x08) sbi(PORTD, GPIO3);
     6bc:	43 ff       	sbrs	r20, 3
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__stack+0x3c5>
     6c0:	5e 9a       	sbi	0x0b, 6	; 11
     6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <__stack+0x3d5>
					else cbi(PORTD, GPIO3);
     6c4:	5e 98       	cbi	0x0b, 6	; 11
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <__stack+0x3d5>
				
				break;
			
			default:
				
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
     6c8:	e0 91 13 01 	lds	r30, 0x0113
     6cc:	f0 91 14 01 	lds	r31, 0x0114
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	81 83       	std	Z+1, r24	; 0x01
				break;
		}
		
		//send prepared tx buffer to pc
		for (count =  0; count < LMS_CTRL_PACKET_SIZE; count++)
     6d4:	10 92 63 02 	sts	0x0263, r1
     6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <__stack+0x3f3>
		{
			Buffer_StoreElement(&Tx_Buffer, tx_buff[count]);
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ec 59       	subi	r30, 0x9C	; 156
     6de:	fd 4f       	sbci	r31, 0xFD	; 253
     6e0:	88 e5       	ldi	r24, 0x58	; 88
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	60 81       	ld	r22, Z
     6e6:	1e d4       	rcall	.+2108   	; 0xf24 <Buffer_StoreElement>
				LMS_Ctrl_Packet_Tx->Header.Status = STATUS_UNKNOWN_CMD;
				break;
		}
		
		//send prepared tx buffer to pc
		for (count =  0; count < LMS_CTRL_PACKET_SIZE; count++)
     6e8:	80 91 63 02 	lds	r24, 0x0263
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	80 93 63 02 	sts	0x0263, r24
     6f2:	e0 91 63 02 	lds	r30, 0x0263
     6f6:	e0 34       	cpi	r30, 0x40	; 64
     6f8:	80 f3       	brcs	.-32     	; 0x6da <__stack+0x3db>
		{
			Buffer_StoreElement(&Tx_Buffer, tx_buff[count]);
		}
		cbi (PORTB, LED);
     6fa:	2f 98       	cbi	0x05, 7	; 5
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	08 95       	ret

00000710 <CDC_Task>:
}

/** Task to manage CDC data transmission and reception to and from the host, from and to the physical USART. */
TASK(CDC_Task)
{
	if (USB_IsConnected)
     710:	80 91 ac 02 	lds	r24, 0x02AC
     714:	88 23       	and	r24, r24
     716:	09 f4       	brne	.+2      	; 0x71a <CDC_Task+0xa>
     718:	59 c0       	rjmp	.+178    	; 0x7cc <CDC_Task+0xbc>
	{
		/* Select the Serial Rx Endpoint */
		Endpoint_SelectEndpoint(CDC_RX_EPNUM);
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	80 93 e9 00 	sts	0x00E9, r24
		
		/* Check to see if a packet has been received from the host */
		if (Endpoint_IsOUTReceived())
     720:	80 91 e8 00 	lds	r24, 0x00E8
     724:	82 fd       	sbrc	r24, 2
     726:	06 c0       	rjmp	.+12     	; 0x734 <CDC_Task+0x24>
     728:	1a c0       	rjmp	.+52     	; 0x75e <CDC_Task+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     72a:	60 91 f1 00 	lds	r22, 0x00F1
		{
			/* Read the bytes in from the endpoint into the buffer while space is available */
			while (Endpoint_BytesInEndpoint() && (BUFF_STATICSIZE - Rx_Buffer.Elements))
			{
				/* Store each character from the endpoint */
				Buffer_StoreElement(&Rx_Buffer, Endpoint_Read_Byte());
     72e:	8e ed       	ldi	r24, 0xDE	; 222
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	f8 d3       	rcall	.+2032   	; 0xf24 <Buffer_StoreElement>
		
		/* Check to see if a packet has been received from the host */
		if (Endpoint_IsOUTReceived())
		{
			/* Read the bytes in from the endpoint into the buffer while space is available */
			while (Endpoint_BytesInEndpoint() && (BUFF_STATICSIZE - Rx_Buffer.Elements))
     734:	80 91 f2 00 	lds	r24, 0x00F2
     738:	88 23       	and	r24, r24
     73a:	21 f0       	breq	.+8      	; 0x744 <CDC_Task+0x34>
     73c:	80 91 62 02 	lds	r24, 0x0262
     740:	80 38       	cpi	r24, 0x80	; 128
     742:	99 f7       	brne	.-26     	; 0x72a <CDC_Task+0x1a>
				/* Store each character from the endpoint */
				Buffer_StoreElement(&Rx_Buffer, Endpoint_Read_Byte());
			}
			
			/* Check to see if all bytes in the current packet have been read */
			if (!(Endpoint_BytesInEndpoint()))
     744:	80 91 f2 00 	lds	r24, 0x00F2
     748:	88 23       	and	r24, r24
     74a:	49 f4       	brne	.+18     	; 0x75e <CDC_Task+0x4e>
			{
				/* Clear the endpoint buffer */
				Endpoint_ClearOUT();
     74c:	80 91 e8 00 	lds	r24, 0x00E8
     750:	98 2f       	mov	r25, r24
     752:	9b 7f       	andi	r25, 0xFB	; 251
     754:	90 93 e8 00 	sts	0x00E8, r25
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		
		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC_TX_EPNUM);
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	80 93 e9 00 	sts	0x00E9, r24

		/* Check if the Tx buffer contains anything to be sent to the host */
		if (Tx_Buffer.Elements)
     764:	80 91 dc 01 	lds	r24, 0x01DC
     768:	88 23       	and	r24, r24
     76a:	81 f1       	breq	.+96     	; 0x7cc <CDC_Task+0xbc>
		{
			/* Wait until Serial Tx Endpoint Ready for Read/Write */
			while (!(Endpoint_IsReadWriteAllowed()));
     76c:	80 91 e8 00 	lds	r24, 0x00E8
     770:	85 ff       	sbrs	r24, 5
     772:	fc cf       	rjmp	.-8      	; 0x76c <CDC_Task+0x5c>
     774:	05 c0       	rjmp	.+10     	; 0x780 <CDC_Task+0x70>
			
			/* Write the bytes from the buffer to the endpoint while space is available */
			while (Tx_Buffer.Elements && (Endpoint_BytesInEndpoint() < CDC_TXRX_EPSIZE))
			{
				/* Write each byte retreived from the buffer to the endpoint */
				Endpoint_Write_Byte(Buffer_GetElement(&Tx_Buffer));
     776:	88 e5       	ldi	r24, 0x58	; 88
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0b d4       	rcall	.+2070   	; 0xf92 <Buffer_GetElement>
			 *  \param Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     77c:	80 93 f1 00 	sts	0x00F1, r24
		{
			/* Wait until Serial Tx Endpoint Ready for Read/Write */
			while (!(Endpoint_IsReadWriteAllowed()));
			
			/* Write the bytes from the buffer to the endpoint while space is available */
			while (Tx_Buffer.Elements && (Endpoint_BytesInEndpoint() < CDC_TXRX_EPSIZE))
     780:	80 91 dc 01 	lds	r24, 0x01DC
     784:	88 23       	and	r24, r24
     786:	21 f0       	breq	.+8      	; 0x790 <CDC_Task+0x80>
     788:	80 91 f2 00 	lds	r24, 0x00F2
     78c:	80 34       	cpi	r24, 0x40	; 64
     78e:	98 f3       	brcs	.-26     	; 0x776 <CDC_Task+0x66>
				/* Write each byte retreived from the buffer to the endpoint */
				Endpoint_Write_Byte(Buffer_GetElement(&Tx_Buffer));
			}
			
			/* Remember if the packet to send completely fills the endpoint */
			bool IsFull = (Endpoint_BytesInEndpoint() == CDC_TXRX_EPSIZE);
     790:	80 91 f2 00 	lds	r24, 0x00F2
			
			/* Send the data */
			Endpoint_ClearIN();
     794:	90 91 e8 00 	lds	r25, 0x00E8
     798:	29 2f       	mov	r18, r25
     79a:	2e 7f       	andi	r18, 0xFE	; 254
     79c:	20 93 e8 00 	sts	0x00E8, r18
     7a0:	9f 77       	andi	r25, 0x7F	; 127
     7a2:	90 93 e8 00 	sts	0x00E8, r25

			/* If no more data to send and the last packet filled the endpoint, send an empty packet to release
			 * the buffer on the receiver (otherwise all data will be cached until a non-full packet is received) */
			if (IsFull && !(Tx_Buffer.Elements))
     7a6:	80 34       	cpi	r24, 0x40	; 64
     7a8:	89 f4       	brne	.+34     	; 0x7cc <CDC_Task+0xbc>
     7aa:	80 91 dc 01 	lds	r24, 0x01DC
     7ae:	88 23       	and	r24, r24
     7b0:	69 f4       	brne	.+26     	; 0x7cc <CDC_Task+0xbc>
			{
				/* Wait until Serial Tx Endpoint Ready for Read/Write */
				while (!(Endpoint_IsReadWriteAllowed()));
     7b2:	80 91 e8 00 	lds	r24, 0x00E8
     7b6:	85 ff       	sbrs	r24, 5
     7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <CDC_Task+0xa2>

				/* Send an empty packet to terminate the transfer */
				Endpoint_ClearIN();
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
     7be:	98 2f       	mov	r25, r24
     7c0:	9e 7f       	andi	r25, 0xFE	; 254
     7c2:	90 93 e8 00 	sts	0x00E8, r25
     7c6:	8f 77       	andi	r24, 0x7F	; 127
     7c8:	80 93 e8 00 	sts	0x00E8, r24
     7cc:	08 95       	ret

000007ce <EVENT_USB_UnhandledControlPacket>:
void EVENT_USB_UnhandledControlPacket(void)
{
	uint8_t* LineCodingData = (uint8_t*)&LineCoding;

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
     7ce:	80 91 ae 02 	lds	r24, 0x02AE
     7d2:	81 32       	cpi	r24, 0x21	; 33
     7d4:	31 f0       	breq	.+12     	; 0x7e2 <EVENT_USB_UnhandledControlPacket+0x14>
     7d6:	82 32       	cpi	r24, 0x22	; 34
     7d8:	a9 f1       	breq	.+106    	; 0x844 <EVENT_USB_UnhandledControlPacket+0x76>
     7da:	80 32       	cpi	r24, 0x20	; 32
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <EVENT_USB_UnhandledControlPacket+0x12>
     7de:	48 c0       	rjmp	.+144    	; 0x870 <EVENT_USB_UnhandledControlPacket+0xa2>
     7e0:	19 c0       	rjmp	.+50     	; 0x814 <EVENT_USB_UnhandledControlPacket+0x46>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     7e2:	80 91 ad 02 	lds	r24, 0x02AD
     7e6:	81 3a       	cpi	r24, 0xA1	; 161
     7e8:	09 f0       	breq	.+2      	; 0x7ec <EVENT_USB_UnhandledControlPacket+0x1e>
     7ea:	42 c0       	rjmp	.+132    	; 0x870 <EVENT_USB_UnhandledControlPacket+0xa2>
			{	
				/* Acknowledge the SETUP packet, ready for data transfer */
				Endpoint_ClearSETUP();
     7ec:	80 91 e8 00 	lds	r24, 0x00E8
     7f0:	87 7f       	andi	r24, 0xF7	; 247
     7f2:	80 93 e8 00 	sts	0x00E8, r24

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(LineCodingData, sizeof(LineCoding));
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	67 e0       	ldi	r22, 0x07	; 7
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	c7 d5       	rcall	.+2958   	; 0x138e <Endpoint_Write_Control_Stream_LE>
				
				/* Finalize the stream transfer to send the last packet or clear the host abort */
				Endpoint_ClearOUT();
     800:	80 91 e8 00 	lds	r24, 0x00E8
     804:	98 2f       	mov	r25, r24
     806:	9b 7f       	andi	r25, 0xFB	; 251
     808:	90 93 e8 00 	sts	0x00E8, r25
     80c:	8f 77       	andi	r24, 0x7F	; 127
     80e:	80 93 e8 00 	sts	0x00E8, r24
     812:	08 95       	ret
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     814:	80 91 ad 02 	lds	r24, 0x02AD
     818:	81 32       	cpi	r24, 0x21	; 33
     81a:	51 f5       	brne	.+84     	; 0x870 <EVENT_USB_UnhandledControlPacket+0xa2>
			{
				/* Acknowledge the SETUP packet, ready for data transfer */
				Endpoint_ClearSETUP();
     81c:	80 91 e8 00 	lds	r24, 0x00E8
     820:	87 7f       	andi	r24, 0xF7	; 247
     822:	80 93 e8 00 	sts	0x00E8, r24

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(LineCodingData, sizeof(LineCoding));
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	67 e0       	ldi	r22, 0x07	; 7
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	fb d5       	rcall	.+3062   	; 0x1426 <Endpoint_Read_Control_Stream_LE>

				/* Finalize the stream transfer to clear the last packet from the host */
				Endpoint_ClearIN();
     830:	80 91 e8 00 	lds	r24, 0x00E8
     834:	98 2f       	mov	r25, r24
     836:	9e 7f       	andi	r25, 0xFE	; 254
     838:	90 93 e8 00 	sts	0x00E8, r25
     83c:	8f 77       	andi	r24, 0x7F	; 127
     83e:	80 93 e8 00 	sts	0x00E8, r24
				
				/* Reconfigure the USART with the new settings */
				Reconfigure_SPI_for_LMS();
     842:	7d cc       	rjmp	.-1798   	; 0x13e <Reconfigure_SPI_for_LMS>
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     844:	80 91 ad 02 	lds	r24, 0x02AD
     848:	81 32       	cpi	r24, 0x21	; 33
     84a:	91 f4       	brne	.+36     	; 0x870 <EVENT_USB_UnhandledControlPacket+0xa2>
			{				
				/* Acknowledge the SETUP packet, ready for data transfer */
				Endpoint_ClearSETUP();
     84c:	80 91 e8 00 	lds	r24, 0x00E8
     850:	87 7f       	andi	r24, 0xF7	; 247
     852:	80 93 e8 00 	sts	0x00E8, r24
				         lines. The mask is read in from the wValue parameter in USB_ControlRequest, and can be masked against the
						 CONTROL_LINE_OUT_* masks to determine the RTS and DTR line states using the following code:
				*/

				/* Acknowledge status stage */
				while (!(Endpoint_IsINReady()));
     856:	80 91 e8 00 	lds	r24, 0x00E8
     85a:	80 ff       	sbrs	r24, 0
     85c:	fc cf       	rjmp	.-8      	; 0x856 <EVENT_USB_UnhandledControlPacket+0x88>
				Endpoint_ClearIN();
     85e:	80 91 e8 00 	lds	r24, 0x00E8
     862:	98 2f       	mov	r25, r24
     864:	9e 7f       	andi	r25, 0xFE	; 254
     866:	90 93 e8 00 	sts	0x00E8, r25
     86a:	8f 77       	andi	r24, 0x7F	; 127
     86c:	80 93 e8 00 	sts	0x00E8, r24
     870:	08 95       	ret

00000872 <EVENT_USB_ConfigurationChanged>:
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management task started.
 */
void EVENT_USB_ConfigurationChanged(void)
{
	/* Setup CDC Notification, Rx and Tx Endpoints */
	Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT,
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	61 ec       	ldi	r22, 0xC1	; 193
     876:	42 e0       	ldi	r20, 0x02	; 2
     878:	60 d5       	rcall	.+2752   	; 0x133a <Endpoint_ConfigureEndpoint_Prv>
		                       ENDPOINT_DIR_IN, CDC_NOTIFICATION_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK,
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	61 e8       	ldi	r22, 0x81	; 129
     87e:	42 e3       	ldi	r20, 0x32	; 50
     880:	5c d5       	rcall	.+2744   	; 0x133a <Endpoint_ConfigureEndpoint_Prv>
		                       ENDPOINT_DIR_IN, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	60 e8       	ldi	r22, 0x80	; 128
     886:	42 e3       	ldi	r20, 0x32	; 50
     888:	58 d5       	rcall	.+2736   	; 0x133a <Endpoint_ConfigureEndpoint_Prv>
		                       ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);

	/* Start CDC task */
	Scheduler_SetTaskMode(CDC_Task, TASK_RUN);
     88a:	88 e8       	ldi	r24, 0x88	; 136
     88c:	93 e0       	ldi	r25, 0x03	; 3
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	a6 d3       	rcall	.+1868   	; 0xfde <Scheduler_SetTaskMode>
	Scheduler_SetTaskMode(Main_Task, TASK_RUN);
     892:	86 e2       	ldi	r24, 0x26	; 38
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	61 e0       	ldi	r22, 0x01	; 1
}
     898:	a2 c3       	rjmp	.+1860   	; 0xfde <Scheduler_SetTaskMode>

0000089a <EVENT_USB_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Connect(void)
{
	/* Start USB management task */
	Scheduler_SetTaskMode(USB_USBTask, TASK_RUN);
     89a:	8f e2       	ldi	r24, 0x2F	; 47
     89c:	9b e0       	ldi	r25, 0x0B	; 11
     89e:	61 e0       	ldi	r22, 0x01	; 1

	/* Indicate USB enumerating */
	//UpdateStatus(Status_USBEnumerating);
}
     8a0:	9e c3       	rjmp	.+1852   	; 0xfde <Scheduler_SetTaskMode>

000008a2 <EVENT_USB_Disconnect>:
/** Event handler for the USB_Disconnect event. This stops the USB management and CDC management tasks.
 */
void EVENT_USB_Disconnect(void)
{
	/* Stop running CDC and USB management tasks */
	Scheduler_SetTaskMode(CDC_Task, TASK_STOP);
     8a2:	88 e8       	ldi	r24, 0x88	; 136
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	9a d3       	rcall	.+1844   	; 0xfde <Scheduler_SetTaskMode>
	Scheduler_SetTaskMode(USB_USBTask, TASK_STOP);
     8aa:	8f e2       	ldi	r24, 0x2F	; 47
     8ac:	9b e0       	ldi	r25, 0x0B	; 11
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	96 d3       	rcall	.+1836   	; 0xfde <Scheduler_SetTaskMode>
	
	/* Reset Tx and Rx buffers, device disconnected */
	Buffer_Initialize(&Rx_Buffer);
     8b2:	8e ed       	ldi	r24, 0xDE	; 222
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	22 d3       	rcall	.+1604   	; 0xefc <Buffer_Initialize>
	Buffer_Initialize(&Tx_Buffer);
     8b8:	88 e5       	ldi	r24, 0x58	; 88
     8ba:	91 e0       	ldi	r25, 0x01	; 1
}
     8bc:	1f c3       	rjmp	.+1598   	; 0xefc <Buffer_Initialize>

000008be <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  starts the scheduler to run the application tasks.
 */
int main(void)
{
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     8c4:	84 b7       	in	r24, 0x34	; 52
     8c6:	87 7f       	andi	r24, 0xF7	; 247
     8c8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	80 93 60 00 	sts	0x0060, r24
     8d4:	10 92 60 00 	sts	0x0060, r1
     8d8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1); // with 8MHz crystal, this means CLK=8000000
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	20 e8       	ldi	r18, 0x80	; 128
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	20 93 61 00 	sts	0x0061, r18
     8e8:	80 93 61 00 	sts	0x0061, r24
     8ec:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	
	//set outputs directions
	// Prepare PortB for SPI - set PB0(^SS), PB1(SCK), PB2(MOSI) as output as well as all other pins except PB3(MISO)
	sbi (DDRB, SPI_NCS_0);
     8ee:	20 9a       	sbi	0x04, 0	; 4
	sbi (DDRB, SPI_CLK);
     8f0:	21 9a       	sbi	0x04, 1	; 4
	sbi (DDRB, SPI_MOSI);
     8f2:	22 9a       	sbi	0x04, 2	; 4
	sbi (DDRB, RESET);
     8f4:	24 9a       	sbi	0x04, 4	; 4
	sbi (DDRB, SPI_NCS_1);
     8f6:	25 9a       	sbi	0x04, 5	; 4
	sbi (DDRB, SPI_NCS_2);
     8f8:	26 9a       	sbi	0x04, 6	; 4
	sbi (DDRB, LED);
     8fa:	27 9a       	sbi	0x04, 7	; 4
	
	sbi (DDRC, GPIO0);
     8fc:	3e 9a       	sbi	0x07, 6	; 7
	sbi (DDRC, GPIO1);
     8fe:	3f 9a       	sbi	0x07, 7	; 7
	
	sbi (DDRD, GPIO2);
     900:	54 9a       	sbi	0x0a, 4	; 10
	sbi (DDRD, GPIO3);
     902:	56 9a       	sbi	0x0a, 6	; 10
	sbi (DDRB, SPI_NCS_3);
     904:	23 9a       	sbi	0x04, 3	; 4

	//set outputs levels
	sbi(PORTB, SPI_NCS_0); // make sure the ^SS select pin is high (disabled)
     906:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB, SPI_NCS_1); // make sure the ^SS select pin is high (disabled)
     908:	2d 9a       	sbi	0x05, 5	; 5
	sbi(PORTB, SPI_NCS_2); // make sure the ^SS select pin is high (disabled)
     90a:	2e 9a       	sbi	0x05, 6	; 5
	sbi(PORTB, RESET); // make sure the ^Reset pin is high
     90c:	2c 9a       	sbi	0x05, 4	; 5
	
	Reconfigure_SPI_for_LMS();
     90e:	17 dc       	rcall	.-2002   	; 0x13e <Reconfigure_SPI_for_LMS>
	i2cInit();
     910:	bd d0       	rcall	.+378    	; 0xa8c <i2cInit>
	MIPI_RFFE_Init ();
     912:	6d d1       	rcall	.+730    	; 0xbee <MIPI_RFFE_Init>
	

	/* 16-bit Timer1 Initialization */
	TCCR1A = 0; //start the timer
     914:	10 92 80 00 	sts	0x0080, r1
	//TCCR1B = (1 << CS10); // no Timer1 prescaling, use CLK
	TCCR1B = (1 << CS12); // prescale Timer1 by CLK/256
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	80 93 81 00 	sts	0x0081, r24
	// 16-bit = 2^16 = 65536 maximum ticks for Timer1
	// 65536 / 31250 =~ 2.1
	// so Timer1 will overflow back to 0 about every 2 seconds

	/* Ring buffer Initialization */
	Buffer_Initialize(&Rx_Buffer);
     91e:	8e ed       	ldi	r24, 0xDE	; 222
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	ec d2       	rcall	.+1496   	; 0xefc <Buffer_Initialize>
	Buffer_Initialize(&Tx_Buffer);
     924:	88 e5       	ldi	r24, 0x58	; 88
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	e9 d2       	rcall	.+1490   	; 0xefc <Buffer_Initialize>

		/* Inline Functions: */
			static inline void Scheduler_InitScheduler(const uint8_t TotalTasks) ATTR_ALWAYS_INLINE;
			static inline void Scheduler_InitScheduler(const uint8_t TotalTasks)
			{
				Scheduler_TotalTasks = TotalTasks;
     92a:	13 e0       	ldi	r17, 0x03	; 3
     92c:	10 93 a5 02 	sts	0x02A5, r17

	/* Initialize Scheduler so that it can be used */
	Scheduler_Init();

	/* Initialize USB Subsystem */
	USB_Init();
     930:	ec d5       	rcall	.+3032   	; 0x150a <USB_Init>
     932:	10 93 a5 02 	sts	0x02A5, r17
     936:	c0 e0       	ldi	r28, 0x00	; 0
     938:	d1 e0       	ldi	r29, 0x01	; 1
     93a:	07 c0       	rjmp	.+14     	; 0x94a <main+0x8c>
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
					{
						if (CurrTask->TaskStatus == TASK_RUN)
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	88 23       	and	r24, r24
     940:	19 f0       	breq	.+6      	; 0x948 <main+0x8a>
						  CurrTask->Task();
     942:	e8 81       	ld	r30, Y
     944:	f9 81       	ldd	r31, Y+1	; 0x01
     946:	09 95       	icall

						CurrTask++;
     948:	24 96       	adiw	r28, 0x04	; 4

				for (;;)
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	cc 30       	cpi	r28, 0x0C	; 12
     94e:	d8 07       	cpc	r29, r24
     950:	a9 f7       	brne	.-22     	; 0x93c <main+0x7e>
     952:	2c 97       	sbiw	r28, 0x0c	; 12
     954:	fa cf       	rjmp	.-12     	; 0x94a <main+0x8c>

00000956 <i2cPutbyte>:
     956:	27 e0       	ldi	r18, 0x07	; 7
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	48 2f       	mov	r20, r24
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	ca 01       	movw	r24, r20
     960:	02 2e       	mov	r0, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <i2cPutbyte+0x12>
     964:	95 95       	asr	r25
     966:	87 95       	ror	r24
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <i2cPutbyte+0xe>
     96c:	80 ff       	sbrs	r24, 0
     96e:	02 c0       	rjmp	.+4      	; 0x974 <i2cPutbyte+0x1e>
     970:	59 9a       	sbi	0x0b, 1	; 11
     972:	01 c0       	rjmp	.+2      	; 0x976 <i2cPutbyte+0x20>
     974:	59 98       	cbi	0x0b, 1	; 11
     976:	00 00       	nop
     978:	00 00       	nop
     97a:	00 00       	nop
     97c:	00 00       	nop
     97e:	00 00       	nop
     980:	00 00       	nop
     982:	00 00       	nop
     984:	00 00       	nop
     986:	00 00       	nop
     988:	00 00       	nop
     98a:	58 9a       	sbi	0x0b, 0	; 11
     98c:	00 00       	nop
     98e:	00 00       	nop
     990:	00 00       	nop
     992:	00 00       	nop
     994:	00 00       	nop
     996:	00 00       	nop
     998:	00 00       	nop
     99a:	00 00       	nop
     99c:	00 00       	nop
     99e:	00 00       	nop
     9a0:	58 98       	cbi	0x0b, 0	; 11
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	30 40       	sbci	r19, 0x00	; 0
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	2f 3f       	cpi	r18, 0xFF	; 255
     9aa:	38 07       	cpc	r19, r24
     9ac:	c1 f6       	brne	.-80     	; 0x95e <i2cPutbyte+0x8>
     9ae:	59 9a       	sbi	0x0b, 1	; 11
     9b0:	51 98       	cbi	0x0a, 1	; 10
     9b2:	00 00       	nop
     9b4:	00 00       	nop
     9b6:	00 00       	nop
     9b8:	00 00       	nop
     9ba:	00 00       	nop
     9bc:	00 00       	nop
     9be:	00 00       	nop
     9c0:	00 00       	nop
     9c2:	00 00       	nop
     9c4:	00 00       	nop
     9c6:	58 9a       	sbi	0x0b, 0	; 11
     9c8:	29 b1       	in	r18, 0x09	; 9
     9ca:	00 00       	nop
     9cc:	00 00       	nop
     9ce:	00 00       	nop
     9d0:	00 00       	nop
     9d2:	00 00       	nop
     9d4:	00 00       	nop
     9d6:	00 00       	nop
     9d8:	00 00       	nop
     9da:	00 00       	nop
     9dc:	00 00       	nop
     9de:	58 98       	cbi	0x0b, 0	; 11
     9e0:	51 9a       	sbi	0x0a, 1	; 10
     9e2:	00 00       	nop
     9e4:	00 00       	nop
     9e6:	00 00       	nop
     9e8:	00 00       	nop
     9ea:	00 00       	nop
     9ec:	00 00       	nop
     9ee:	00 00       	nop
     9f0:	00 00       	nop
     9f2:	00 00       	nop
     9f4:	00 00       	nop
     9f6:	26 95       	lsr	r18
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	28 27       	eor	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	21 70       	andi	r18, 0x01	; 1
     a00:	30 70       	andi	r19, 0x00	; 0
     a02:	c9 01       	movw	r24, r18
     a04:	08 95       	ret

00000a06 <i2cGetbyte>:
     a06:	59 9a       	sbi	0x0b, 1	; 11
     a08:	51 98       	cbi	0x0a, 1	; 10
     a0a:	27 e0       	ldi	r18, 0x07	; 7
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	00 00       	nop
     a12:	00 00       	nop
     a14:	00 00       	nop
     a16:	00 00       	nop
     a18:	00 00       	nop
     a1a:	00 00       	nop
     a1c:	00 00       	nop
     a1e:	00 00       	nop
     a20:	00 00       	nop
     a22:	00 00       	nop
     a24:	58 9a       	sbi	0x0b, 0	; 11
     a26:	44 0f       	add	r20, r20
     a28:	49 99       	sbic	0x09, 1	; 9
     a2a:	41 60       	ori	r20, 0x01	; 1
     a2c:	00 00       	nop
     a2e:	00 00       	nop
     a30:	00 00       	nop
     a32:	00 00       	nop
     a34:	00 00       	nop
     a36:	00 00       	nop
     a38:	00 00       	nop
     a3a:	00 00       	nop
     a3c:	00 00       	nop
     a3e:	00 00       	nop
     a40:	58 98       	cbi	0x0b, 0	; 11
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	30 40       	sbci	r19, 0x00	; 0
     a46:	5f ef       	ldi	r21, 0xFF	; 255
     a48:	2f 3f       	cpi	r18, 0xFF	; 255
     a4a:	35 07       	cpc	r19, r21
     a4c:	09 f7       	brne	.-62     	; 0xa10 <i2cGetbyte+0xa>
     a4e:	51 9a       	sbi	0x0a, 1	; 10
     a50:	89 2b       	or	r24, r25
     a52:	11 f0       	breq	.+4      	; 0xa58 <i2cGetbyte+0x52>
     a54:	59 9a       	sbi	0x0b, 1	; 11
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <i2cGetbyte+0x54>
     a58:	59 98       	cbi	0x0b, 1	; 11
     a5a:	00 00       	nop
     a5c:	00 00       	nop
     a5e:	00 00       	nop
     a60:	00 00       	nop
     a62:	00 00       	nop
     a64:	00 00       	nop
     a66:	00 00       	nop
     a68:	00 00       	nop
     a6a:	00 00       	nop
     a6c:	00 00       	nop
     a6e:	58 9a       	sbi	0x0b, 0	; 11
     a70:	00 00       	nop
     a72:	00 00       	nop
     a74:	00 00       	nop
     a76:	00 00       	nop
     a78:	00 00       	nop
     a7a:	00 00       	nop
     a7c:	00 00       	nop
     a7e:	00 00       	nop
     a80:	00 00       	nop
     a82:	00 00       	nop
     a84:	58 98       	cbi	0x0b, 0	; 11
     a86:	59 9a       	sbi	0x0b, 1	; 11
     a88:	84 2f       	mov	r24, r20
     a8a:	08 95       	ret

00000a8c <i2cInit>:
     a8c:	51 9a       	sbi	0x0a, 1	; 10
     a8e:	50 9a       	sbi	0x0a, 0	; 10
     a90:	59 9a       	sbi	0x0b, 1	; 11
     a92:	58 9a       	sbi	0x0b, 0	; 11
     a94:	08 95       	ret

00000a96 <i2cSend>:
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	16 2f       	mov	r17, r22
     aa2:	04 2f       	mov	r16, r20
     aa4:	e9 01       	movw	r28, r18
     aa6:	59 98       	cbi	0x0b, 1	; 11
     aa8:	00 00       	nop
     aaa:	00 00       	nop
     aac:	00 00       	nop
     aae:	00 00       	nop
     ab0:	00 00       	nop
     ab2:	58 98       	cbi	0x0b, 0	; 11
     ab4:	50 df       	rcall	.-352    	; 0x956 <i2cPutbyte>
     ab6:	f8 2e       	mov	r15, r24
     ab8:	81 2f       	mov	r24, r17
     aba:	4d df       	rcall	.-358    	; 0x956 <i2cPutbyte>
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <i2cSend+0x2e>
     abe:	89 91       	ld	r24, Y+
     ac0:	4a df       	rcall	.-364    	; 0x956 <i2cPutbyte>
     ac2:	01 50       	subi	r16, 0x01	; 1
     ac4:	00 23       	and	r16, r16
     ac6:	d9 f7       	brne	.-10     	; 0xabe <i2cSend+0x28>
     ac8:	59 98       	cbi	0x0b, 1	; 11
     aca:	00 00       	nop
     acc:	00 00       	nop
     ace:	00 00       	nop
     ad0:	00 00       	nop
     ad2:	00 00       	nop
     ad4:	00 00       	nop
     ad6:	00 00       	nop
     ad8:	00 00       	nop
     ada:	00 00       	nop
     adc:	00 00       	nop
     ade:	58 9a       	sbi	0x0b, 0	; 11
     ae0:	00 00       	nop
     ae2:	00 00       	nop
     ae4:	00 00       	nop
     ae6:	00 00       	nop
     ae8:	00 00       	nop
     aea:	59 9a       	sbi	0x0b, 1	; 11
     aec:	00 00       	nop
     aee:	00 00       	nop
     af0:	00 00       	nop
     af2:	00 00       	nop
     af4:	00 00       	nop
     af6:	00 00       	nop
     af8:	00 00       	nop
     afa:	00 00       	nop
     afc:	00 00       	nop
     afe:	00 00       	nop
     b00:	8f 2d       	mov	r24, r15
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	08 95       	ret

00000b0e <i2cReceive>:
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	08 2f       	mov	r16, r24
     b22:	16 2f       	mov	r17, r22
     b24:	d4 2e       	mov	r13, r20
     b26:	f2 2e       	mov	r15, r18
     b28:	e3 2e       	mov	r14, r19
     b2a:	59 98       	cbi	0x0b, 1	; 11
     b2c:	00 00       	nop
     b2e:	00 00       	nop
     b30:	00 00       	nop
     b32:	00 00       	nop
     b34:	00 00       	nop
     b36:	58 98       	cbi	0x0b, 0	; 11
     b38:	0e df       	rcall	.-484    	; 0x956 <i2cPutbyte>
     b3a:	b8 2e       	mov	r11, r24
     b3c:	81 2f       	mov	r24, r17
     b3e:	0b df       	rcall	.-490    	; 0x956 <i2cPutbyte>
     b40:	00 00       	nop
     b42:	00 00       	nop
     b44:	00 00       	nop
     b46:	00 00       	nop
     b48:	00 00       	nop
     b4a:	00 00       	nop
     b4c:	00 00       	nop
     b4e:	00 00       	nop
     b50:	00 00       	nop
     b52:	00 00       	nop
     b54:	58 9a       	sbi	0x0b, 0	; 11
     b56:	59 98       	cbi	0x0b, 1	; 11
     b58:	00 00       	nop
     b5a:	00 00       	nop
     b5c:	00 00       	nop
     b5e:	00 00       	nop
     b60:	00 00       	nop
     b62:	58 98       	cbi	0x0b, 0	; 11
     b64:	80 2f       	mov	r24, r16
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	f6 de       	rcall	.-532    	; 0x956 <i2cPutbyte>
     b6a:	2f 2d       	mov	r18, r15
     b6c:	3e 2d       	mov	r19, r14
     b6e:	c9 01       	movw	r24, r18
     b70:	ec 01       	movw	r28, r24
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	ed 2c       	mov	r14, r13
     b78:	ff 24       	eor	r15, r15
     b7a:	67 01       	movw	r12, r14
     b7c:	08 94       	sec
     b7e:	c1 1c       	adc	r12, r1
     b80:	d1 1c       	adc	r13, r1
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <i2cReceive+0x88>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	e0 16       	cp	r14, r16
     b8a:	f1 06       	cpc	r15, r17
     b8c:	11 f4       	brne	.+4      	; 0xb92 <i2cReceive+0x84>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	39 df       	rcall	.-398    	; 0xa06 <i2cGetbyte>
     b94:	89 93       	st	Y+, r24
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	0c 15       	cp	r16, r12
     b9c:	1d 05       	cpc	r17, r13
     b9e:	91 f7       	brne	.-28     	; 0xb84 <i2cReceive+0x76>
     ba0:	59 98       	cbi	0x0b, 1	; 11
     ba2:	00 00       	nop
     ba4:	00 00       	nop
     ba6:	00 00       	nop
     ba8:	00 00       	nop
     baa:	00 00       	nop
     bac:	00 00       	nop
     bae:	00 00       	nop
     bb0:	00 00       	nop
     bb2:	00 00       	nop
     bb4:	00 00       	nop
     bb6:	58 9a       	sbi	0x0b, 0	; 11
     bb8:	00 00       	nop
     bba:	00 00       	nop
     bbc:	00 00       	nop
     bbe:	00 00       	nop
     bc0:	00 00       	nop
     bc2:	59 9a       	sbi	0x0b, 1	; 11
     bc4:	00 00       	nop
     bc6:	00 00       	nop
     bc8:	00 00       	nop
     bca:	00 00       	nop
     bcc:	00 00       	nop
     bce:	00 00       	nop
     bd0:	00 00       	nop
     bd2:	00 00       	nop
     bd4:	00 00       	nop
     bd6:	00 00       	nop
     bd8:	8b 2d       	mov	r24, r11
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	bf 90       	pop	r11
     bec:	08 95       	ret

00000bee <MIPI_RFFE_Init>:
     bee:	42 98       	cbi	0x08, 2	; 8
     bf0:	45 98       	cbi	0x08, 5	; 8
     bf2:	3d 9a       	sbi	0x07, 5	; 7
     bf4:	3a 9a       	sbi	0x07, 2	; 7
     bf6:	08 95       	ret

00000bf8 <MIPI_RFFE_Write>:
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <MIPI_RFFE_Write+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <MIPI_RFFE_Write+0x8>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	8a 83       	std	Y+2, r24	; 0x02
     c06:	6b 83       	std	Y+3, r22	; 0x03
     c08:	4c 83       	std	Y+4, r20	; 0x04
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	42 98       	cbi	0x08, 2	; 8
     c10:	45 98       	cbi	0x08, 5	; 8
     c12:	3d 9a       	sbi	0x07, 5	; 7
     c14:	45 9a       	sbi	0x08, 5	; 8
     c16:	00 00       	nop
     c18:	00 00       	nop
     c1a:	00 00       	nop
     c1c:	00 00       	nop
     c1e:	00 00       	nop
     c20:	45 98       	cbi	0x08, 5	; 8
     c22:	51 e0       	ldi	r21, 0x01	; 1
     c24:	23 e0       	ldi	r18, 0x03	; 3
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	fe 01       	movw	r30, r28
     c2a:	32 96       	adiw	r30, 0x02	; 2
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	42 9a       	sbi	0x08, 2	; 8
     c30:	80 81       	ld	r24, Z
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <MIPI_RFFE_Write+0x44>
     c38:	95 95       	asr	r25
     c3a:	87 95       	ror	r24
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <MIPI_RFFE_Write+0x40>
     c40:	80 ff       	sbrs	r24, 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <MIPI_RFFE_Write+0x52>
     c44:	45 9a       	sbi	0x08, 5	; 8
     c46:	54 27       	eor	r21, r20
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <MIPI_RFFE_Write+0x54>
     c4a:	45 98       	cbi	0x08, 5	; 8
     c4c:	42 98       	cbi	0x08, 2	; 8
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	30 40       	sbci	r19, 0x00	; 0
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	2f 3f       	cpi	r18, 0xFF	; 255
     c56:	38 07       	cpc	r19, r24
     c58:	51 f7       	brne	.-44     	; 0xc2e <MIPI_RFFE_Write+0x36>
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	88 23       	and	r24, r24
     c5e:	f9 f4       	brne	.+62     	; 0xc9e <MIPI_RFFE_Write+0xa6>
     c60:	42 9a       	sbi	0x08, 2	; 8
     c62:	45 9a       	sbi	0x08, 5	; 8
     c64:	42 98       	cbi	0x08, 2	; 8
     c66:	26 e0       	ldi	r18, 0x06	; 6
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	fe 01       	movw	r30, r28
     c6c:	34 96       	adiw	r30, 0x04	; 4
     c6e:	42 9a       	sbi	0x08, 2	; 8
     c70:	80 81       	ld	r24, Z
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <MIPI_RFFE_Write+0x84>
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <MIPI_RFFE_Write+0x80>
     c80:	80 ff       	sbrs	r24, 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <MIPI_RFFE_Write+0x90>
     c84:	45 9a       	sbi	0x08, 5	; 8
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <MIPI_RFFE_Write+0x92>
     c88:	45 98       	cbi	0x08, 5	; 8
     c8a:	42 98       	cbi	0x08, 2	; 8
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	30 40       	sbci	r19, 0x00	; 0
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	2f 3f       	cpi	r18, 0xFF	; 255
     c94:	38 07       	cpc	r19, r24
     c96:	59 f7       	brne	.-42     	; 0xc6e <MIPI_RFFE_Write+0x76>
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	45 27       	eor	r20, r21
     c9c:	59 c0       	rjmp	.+178    	; 0xd50 <MIPI_RFFE_Write+0x158>
     c9e:	22 e0       	ldi	r18, 0x02	; 2
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	fe 01       	movw	r30, r28
     ca4:	31 96       	adiw	r30, 0x01	; 1
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	42 9a       	sbi	0x08, 2	; 8
     caa:	80 81       	ld	r24, Z
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <MIPI_RFFE_Write+0xbe>
     cb2:	95 95       	asr	r25
     cb4:	87 95       	ror	r24
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <MIPI_RFFE_Write+0xba>
     cba:	80 ff       	sbrs	r24, 0
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <MIPI_RFFE_Write+0xcc>
     cbe:	45 9a       	sbi	0x08, 5	; 8
     cc0:	54 27       	eor	r21, r20
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <MIPI_RFFE_Write+0xce>
     cc4:	45 98       	cbi	0x08, 5	; 8
     cc6:	42 98       	cbi	0x08, 2	; 8
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	30 40       	sbci	r19, 0x00	; 0
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	2f 3f       	cpi	r18, 0xFF	; 255
     cd0:	38 07       	cpc	r19, r24
     cd2:	51 f7       	brne	.-44     	; 0xca8 <MIPI_RFFE_Write+0xb0>
     cd4:	24 e0       	ldi	r18, 0x04	; 4
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	fe 01       	movw	r30, r28
     cda:	33 96       	adiw	r30, 0x03	; 3
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	42 9a       	sbi	0x08, 2	; 8
     ce0:	80 81       	ld	r24, Z
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <MIPI_RFFE_Write+0xf4>
     ce8:	95 95       	asr	r25
     cea:	87 95       	ror	r24
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <MIPI_RFFE_Write+0xf0>
     cf0:	80 ff       	sbrs	r24, 0
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <MIPI_RFFE_Write+0x102>
     cf4:	45 9a       	sbi	0x08, 5	; 8
     cf6:	54 27       	eor	r21, r20
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <MIPI_RFFE_Write+0x104>
     cfa:	45 98       	cbi	0x08, 5	; 8
     cfc:	42 98       	cbi	0x08, 2	; 8
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	30 40       	sbci	r19, 0x00	; 0
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	2f 3f       	cpi	r18, 0xFF	; 255
     d06:	38 07       	cpc	r19, r24
     d08:	51 f7       	brne	.-44     	; 0xcde <MIPI_RFFE_Write+0xe6>
     d0a:	42 9a       	sbi	0x08, 2	; 8
     d0c:	55 23       	and	r21, r21
     d0e:	11 f0       	breq	.+4      	; 0xd14 <MIPI_RFFE_Write+0x11c>
     d10:	45 9a       	sbi	0x08, 5	; 8
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <MIPI_RFFE_Write+0x11e>
     d14:	45 98       	cbi	0x08, 5	; 8
     d16:	42 98       	cbi	0x08, 2	; 8
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	27 e0       	ldi	r18, 0x07	; 7
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	fe 01       	movw	r30, r28
     d20:	34 96       	adiw	r30, 0x04	; 4
     d22:	51 e0       	ldi	r21, 0x01	; 1
     d24:	42 9a       	sbi	0x08, 2	; 8
     d26:	80 81       	ld	r24, Z
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <MIPI_RFFE_Write+0x13a>
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <MIPI_RFFE_Write+0x136>
     d36:	80 ff       	sbrs	r24, 0
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <MIPI_RFFE_Write+0x148>
     d3a:	45 9a       	sbi	0x08, 5	; 8
     d3c:	45 27       	eor	r20, r21
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <MIPI_RFFE_Write+0x14a>
     d40:	45 98       	cbi	0x08, 5	; 8
     d42:	42 98       	cbi	0x08, 2	; 8
     d44:	21 50       	subi	r18, 0x01	; 1
     d46:	30 40       	sbci	r19, 0x00	; 0
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	2f 3f       	cpi	r18, 0xFF	; 255
     d4c:	38 07       	cpc	r19, r24
     d4e:	51 f7       	brne	.-44     	; 0xd24 <MIPI_RFFE_Write+0x12c>
     d50:	42 9a       	sbi	0x08, 2	; 8
     d52:	44 23       	and	r20, r20
     d54:	11 f0       	breq	.+4      	; 0xd5a <MIPI_RFFE_Write+0x162>
     d56:	45 9a       	sbi	0x08, 5	; 8
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <MIPI_RFFE_Write+0x164>
     d5a:	45 98       	cbi	0x08, 5	; 8
     d5c:	42 98       	cbi	0x08, 2	; 8
     d5e:	42 9a       	sbi	0x08, 2	; 8
     d60:	45 98       	cbi	0x08, 5	; 8
     d62:	3d 98       	cbi	0x07, 5	; 7
     d64:	42 98       	cbi	0x08, 2	; 8
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <MIPI_RFFE_Read>:
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <MIPI_RFFE_Read+0x6>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	6b 83       	std	Y+3, r22	; 0x03
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	42 98       	cbi	0x08, 2	; 8
     d8a:	45 98       	cbi	0x08, 5	; 8
     d8c:	3d 9a       	sbi	0x07, 5	; 7
     d8e:	45 9a       	sbi	0x08, 5	; 8
     d90:	00 00       	nop
     d92:	00 00       	nop
     d94:	00 00       	nop
     d96:	00 00       	nop
     d98:	00 00       	nop
     d9a:	45 98       	cbi	0x08, 5	; 8
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	23 e0       	ldi	r18, 0x03	; 3
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	fe 01       	movw	r30, r28
     da4:	32 96       	adiw	r30, 0x02	; 2
     da6:	51 e0       	ldi	r21, 0x01	; 1
     da8:	42 9a       	sbi	0x08, 2	; 8
     daa:	80 81       	ld	r24, Z
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <MIPI_RFFE_Read+0x42>
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <MIPI_RFFE_Read+0x3e>
     dba:	80 ff       	sbrs	r24, 0
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <MIPI_RFFE_Read+0x50>
     dbe:	45 9a       	sbi	0x08, 5	; 8
     dc0:	45 27       	eor	r20, r21
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <MIPI_RFFE_Read+0x52>
     dc4:	45 98       	cbi	0x08, 5	; 8
     dc6:	42 98       	cbi	0x08, 2	; 8
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	30 40       	sbci	r19, 0x00	; 0
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	2f 3f       	cpi	r18, 0xFF	; 255
     dd0:	38 07       	cpc	r19, r24
     dd2:	51 f7       	brne	.-44     	; 0xda8 <MIPI_RFFE_Read+0x34>
     dd4:	22 e0       	ldi	r18, 0x02	; 2
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	fe 01       	movw	r30, r28
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	42 9a       	sbi	0x08, 2	; 8
     de0:	80 81       	ld	r24, Z
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <MIPI_RFFE_Read+0x78>
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <MIPI_RFFE_Read+0x74>
     df0:	80 ff       	sbrs	r24, 0
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <MIPI_RFFE_Read+0x86>
     df4:	45 9a       	sbi	0x08, 5	; 8
     df6:	45 27       	eor	r20, r21
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <MIPI_RFFE_Read+0x88>
     dfa:	45 98       	cbi	0x08, 5	; 8
     dfc:	42 98       	cbi	0x08, 2	; 8
     dfe:	21 50       	subi	r18, 0x01	; 1
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	2f 3f       	cpi	r18, 0xFF	; 255
     e06:	38 07       	cpc	r19, r24
     e08:	51 f7       	brne	.-44     	; 0xdde <MIPI_RFFE_Read+0x6a>
     e0a:	24 e0       	ldi	r18, 0x04	; 4
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	fe 01       	movw	r30, r28
     e10:	33 96       	adiw	r30, 0x03	; 3
     e12:	51 e0       	ldi	r21, 0x01	; 1
     e14:	42 9a       	sbi	0x08, 2	; 8
     e16:	80 81       	ld	r24, Z
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <MIPI_RFFE_Read+0xae>
     e1e:	95 95       	asr	r25
     e20:	87 95       	ror	r24
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <MIPI_RFFE_Read+0xaa>
     e26:	80 ff       	sbrs	r24, 0
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <MIPI_RFFE_Read+0xbc>
     e2a:	45 9a       	sbi	0x08, 5	; 8
     e2c:	45 27       	eor	r20, r21
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <MIPI_RFFE_Read+0xbe>
     e30:	45 98       	cbi	0x08, 5	; 8
     e32:	42 98       	cbi	0x08, 2	; 8
     e34:	21 50       	subi	r18, 0x01	; 1
     e36:	30 40       	sbci	r19, 0x00	; 0
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	2f 3f       	cpi	r18, 0xFF	; 255
     e3c:	38 07       	cpc	r19, r24
     e3e:	51 f7       	brne	.-44     	; 0xe14 <MIPI_RFFE_Read+0xa0>
     e40:	42 9a       	sbi	0x08, 2	; 8
     e42:	44 23       	and	r20, r20
     e44:	11 f0       	breq	.+4      	; 0xe4a <MIPI_RFFE_Read+0xd6>
     e46:	45 9a       	sbi	0x08, 5	; 8
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <MIPI_RFFE_Read+0xd8>
     e4a:	45 98       	cbi	0x08, 5	; 8
     e4c:	42 98       	cbi	0x08, 2	; 8
     e4e:	42 9a       	sbi	0x08, 2	; 8
     e50:	45 98       	cbi	0x08, 5	; 8
     e52:	3d 98       	cbi	0x07, 5	; 7
     e54:	42 98       	cbi	0x08, 2	; 8
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	27 e0       	ldi	r18, 0x07	; 7
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	42 9a       	sbi	0x08, 2	; 8
     e62:	42 98       	cbi	0x08, 2	; 8
     e64:	35 9b       	sbis	0x06, 5	; 6
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <MIPI_RFFE_Read+0x104>
     e68:	cb 01       	movw	r24, r22
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <MIPI_RFFE_Read+0xfe>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <MIPI_RFFE_Read+0xfa>
     e76:	48 2b       	or	r20, r24
     e78:	21 50       	subi	r18, 0x01	; 1
     e7a:	30 40       	sbci	r19, 0x00	; 0
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	2f 3f       	cpi	r18, 0xFF	; 255
     e80:	38 07       	cpc	r19, r24
     e82:	71 f7       	brne	.-36     	; 0xe60 <MIPI_RFFE_Read+0xec>
     e84:	42 9a       	sbi	0x08, 2	; 8
     e86:	42 98       	cbi	0x08, 2	; 8
     e88:	86 b1       	in	r24, 0x06	; 6
     e8a:	42 9a       	sbi	0x08, 2	; 8
     e8c:	45 98       	cbi	0x08, 5	; 8
     e8e:	3d 98       	cbi	0x07, 5	; 7
     e90:	42 98       	cbi	0x08, 2	; 8
     e92:	84 2f       	mov	r24, r20
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <CALLBACK_USB_GetDescriptor>:
     ea0:	da 01       	movw	r26, r20
     ea2:	92 30       	cpi	r25, 0x02	; 2
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <CALLBACK_USB_GetDescriptor+0x18>
     ea6:	93 30       	cpi	r25, 0x03	; 3
     ea8:	61 f0       	breq	.+24     	; 0xec2 <CALLBACK_USB_GetDescriptor+0x22>
     eaa:	91 30       	cpi	r25, 0x01	; 1
     eac:	f9 f4       	brne	.+62     	; 0xeec <CALLBACK_USB_GetDescriptor+0x4c>
     eae:	e4 e7       	ldi	r30, 0x74	; 116
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	22 e1       	ldi	r18, 0x12	; 18
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	1e c0       	rjmp	.+60     	; 0xef4 <CALLBACK_USB_GetDescriptor+0x54>
     eb8:	e6 e8       	ldi	r30, 0x86	; 134
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	23 e4       	ldi	r18, 0x43	; 67
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	19 c0       	rjmp	.+50     	; 0xef4 <CALLBACK_USB_GetDescriptor+0x54>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	49 f0       	breq	.+18     	; 0xed8 <CALLBACK_USB_GetDescriptor+0x38>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	18 f0       	brcs	.+6      	; 0xed0 <CALLBACK_USB_GetDescriptor+0x30>
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	79 f4       	brne	.+30     	; 0xeec <CALLBACK_USB_GetDescriptor+0x4c>
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <CALLBACK_USB_GetDescriptor+0x40>
     ed0:	e9 ec       	ldi	r30, 0xC9	; 201
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	84 91       	lpm	r24, Z+
     ed6:	07 c0       	rjmp	.+14     	; 0xee6 <CALLBACK_USB_GetDescriptor+0x46>
     ed8:	ed ec       	ldi	r30, 0xCD	; 205
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	84 91       	lpm	r24, Z+
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <CALLBACK_USB_GetDescriptor+0x46>
     ee0:	e3 ef       	ldi	r30, 0xF3	; 243
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	84 91       	lpm	r24, Z+
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <CALLBACK_USB_GetDescriptor+0x54>
     eec:	e0 e0       	ldi	r30, 0x00	; 0
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	ed 93       	st	X+, r30
     ef6:	fc 93       	st	X, r31
     ef8:	c9 01       	movw	r24, r18
     efa:	08 95       	ret

00000efc <Buffer_Initialize>:
     efc:	fc 01       	movw	r30, r24
     efe:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f00:	f8 94       	cli
     f02:	df 01       	movw	r26, r30
     f04:	a0 58       	subi	r26, 0x80	; 128
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	11 96       	adiw	r26, 0x01	; 1
     f0a:	fc 93       	st	X, r31
     f0c:	ee 93       	st	-X, r30
     f0e:	df 01       	movw	r26, r30
     f10:	ae 57       	subi	r26, 0x7E	; 126
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	11 96       	adiw	r26, 0x01	; 1
     f16:	fc 93       	st	X, r31
     f18:	ee 93       	st	-X, r30
     f1a:	ec 57       	subi	r30, 0x7C	; 124
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f20:	8f bf       	out	0x3f, r24	; 63
     f22:	08 95       	ret

00000f24 <Buffer_StoreElement>:
     f24:	ac 01       	movw	r20, r24
     f26:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f28:	f8 94       	cli
     f2a:	fc 01       	movw	r30, r24
     f2c:	ec 57       	subi	r30, 0x7C	; 124
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	80 38       	cpi	r24, 0x80	; 128
     f34:	99 f4       	brne	.+38     	; 0xf5c <Buffer_StoreElement+0x38>
     f36:	fa 01       	movw	r30, r20
     f38:	ee 57       	subi	r30, 0x7E	; 126
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	20 81       	ld	r18, Z
     f48:	31 81       	ldd	r19, Z+1	; 0x01
     f4a:	ca 01       	movw	r24, r20
     f4c:	80 58       	subi	r24, 0x80	; 128
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	31 f4       	brne	.+12     	; 0xf62 <Buffer_StoreElement+0x3e>
     f56:	51 83       	std	Z+1, r21	; 0x01
     f58:	40 83       	st	Z, r20
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <Buffer_StoreElement+0x3e>
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	80 83       	st	Z, r24
     f62:	da 01       	movw	r26, r20
     f64:	a0 58       	subi	r26, 0x80	; 128
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	ed 91       	ld	r30, X+
     f6a:	fc 91       	ld	r31, X
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	60 83       	st	Z, r22
     f70:	8d 91       	ld	r24, X+
     f72:	9c 91       	ld	r25, X
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	9c 93       	st	X, r25
     f7c:	8e 93       	st	-X, r24
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	11 97       	sbiw	r26, 0x01	; 1
     f84:	ea 17       	cp	r30, r26
     f86:	fb 07       	cpc	r31, r27
     f88:	11 f4       	brne	.+4      	; 0xf8e <Buffer_StoreElement+0x6a>
     f8a:	51 83       	std	Z+1, r21	; 0x01
     f8c:	40 83       	st	Z, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f8e:	7f bf       	out	0x3f, r23	; 63
     f90:	08 95       	ret

00000f92 <Buffer_GetElement>:
     f92:	ac 01       	movw	r20, r24
     f94:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f96:	f8 94       	cli
     f98:	dc 01       	movw	r26, r24
     f9a:	ae 57       	subi	r26, 0x7E	; 126
     f9c:	bf 4f       	sbci	r27, 0xFF	; 255
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	11 97       	sbiw	r26, 0x01	; 1
     fa4:	60 81       	ld	r22, Z
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	9c 93       	st	X, r25
     fb2:	8e 93       	st	-X, r24
     fb4:	fa 01       	movw	r30, r20
     fb6:	ec 57       	subi	r30, 0x7C	; 124
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	80 83       	st	Z, r24
     fc0:	2d 91       	ld	r18, X+
     fc2:	3c 91       	ld	r19, X
     fc4:	11 97       	sbiw	r26, 0x01	; 1
     fc6:	ca 01       	movw	r24, r20
     fc8:	80 58       	subi	r24, 0x80	; 128
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	19 f4       	brne	.+6      	; 0xfd8 <Buffer_GetElement+0x46>
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	5c 93       	st	X, r21
     fd6:	4e 93       	st	-X, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd8:	7f bf       	out	0x3f, r23	; 63
     fda:	86 2f       	mov	r24, r22
     fdc:	08 95       	ret

00000fde <Scheduler_SetTaskMode>:
     fde:	9c 01       	movw	r18, r24
     fe0:	e0 e0       	ldi	r30, 0x00	; 0
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <Scheduler_SetTaskMode+0x18>
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	82 17       	cp	r24, r18
     fec:	93 07       	cpc	r25, r19
     fee:	11 f4       	brne	.+4      	; 0xff4 <Scheduler_SetTaskMode+0x16>
     ff0:	62 83       	std	Z+2, r22	; 0x02
     ff2:	08 95       	ret
     ff4:	34 96       	adiw	r30, 0x04	; 4
     ff6:	80 91 a5 02 	lds	r24, 0x02A5
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	80 50       	subi	r24, 0x00	; 0
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	e8 17       	cp	r30, r24
    100a:	f9 07       	cpc	r31, r25
    100c:	61 f7       	brne	.-40     	; 0xfe6 <Scheduler_SetTaskMode+0x8>
    100e:	08 95       	ret

00001010 <USB_Device_ProcessControlPacket>:
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <USB_Device_ProcessControlPacket+0x6>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	ed ea       	ldi	r30, 0xAD	; 173
    101c:	f2 e0       	ldi	r31, 0x02	; 2
    101e:	80 91 f1 00 	lds	r24, 0x00F1
    1022:	81 93       	st	Z+, r24
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	e5 3b       	cpi	r30, 0xB5	; 181
    1028:	f8 07       	cpc	r31, r24
    102a:	c9 f7       	brne	.-14     	; 0x101e <USB_Device_ProcessControlPacket+0xe>
    102c:	80 91 ad 02 	lds	r24, 0x02AD
    1030:	30 91 ae 02 	lds	r19, 0x02AE
    1034:	35 30       	cpi	r19, 0x05	; 5
    1036:	09 f4       	brne	.+2      	; 0x103a <USB_Device_ProcessControlPacket+0x2a>
    1038:	99 c0       	rjmp	.+306    	; 0x116c <USB_Device_ProcessControlPacket+0x15c>
    103a:	36 30       	cpi	r19, 0x06	; 6
    103c:	48 f4       	brcc	.+18     	; 0x1050 <USB_Device_ProcessControlPacket+0x40>
    103e:	31 30       	cpi	r19, 0x01	; 1
    1040:	09 f4       	brne	.+2      	; 0x1044 <USB_Device_ProcessControlPacket+0x34>
    1042:	45 c0       	rjmp	.+138    	; 0x10ce <USB_Device_ProcessControlPacket+0xbe>
    1044:	31 30       	cpi	r19, 0x01	; 1
    1046:	70 f0       	brcs	.+28     	; 0x1064 <USB_Device_ProcessControlPacket+0x54>
    1048:	33 30       	cpi	r19, 0x03	; 3
    104a:	09 f0       	breq	.+2      	; 0x104e <USB_Device_ProcessControlPacket+0x3e>
    104c:	62 c1       	rjmp	.+708    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    104e:	3f c0       	rjmp	.+126    	; 0x10ce <USB_Device_ProcessControlPacket+0xbe>
    1050:	38 30       	cpi	r19, 0x08	; 8
    1052:	09 f4       	brne	.+2      	; 0x1056 <USB_Device_ProcessControlPacket+0x46>
    1054:	1c c1       	rjmp	.+568    	; 0x128e <USB_Device_ProcessControlPacket+0x27e>
    1056:	39 30       	cpi	r19, 0x09	; 9
    1058:	09 f4       	brne	.+2      	; 0x105c <USB_Device_ProcessControlPacket+0x4c>
    105a:	3c c1       	rjmp	.+632    	; 0x12d4 <USB_Device_ProcessControlPacket+0x2c4>
    105c:	36 30       	cpi	r19, 0x06	; 6
    105e:	09 f0       	breq	.+2      	; 0x1062 <USB_Device_ProcessControlPacket+0x52>
    1060:	58 c1       	rjmp	.+688    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    1062:	9f c0       	rjmp	.+318    	; 0x11a2 <USB_Device_ProcessControlPacket+0x192>
    1064:	80 38       	cpi	r24, 0x80	; 128
    1066:	21 f0       	breq	.+8      	; 0x1070 <USB_Device_ProcessControlPacket+0x60>
    1068:	82 38       	cpi	r24, 0x82	; 130
    106a:	09 f0       	breq	.+2      	; 0x106e <USB_Device_ProcessControlPacket+0x5e>
    106c:	52 c1       	rjmp	.+676    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <USB_Device_ProcessControlPacket+0x70>
    1070:	90 91 a8 02 	lds	r25, 0x02A8
    1074:	80 91 a9 02 	lds	r24, 0x02A9
    1078:	88 23       	and	r24, r24
    107a:	91 f0       	breq	.+36     	; 0x10a0 <USB_Device_ProcessControlPacket+0x90>
    107c:	92 60       	ori	r25, 0x02	; 2
    107e:	10 c0       	rjmp	.+32     	; 0x10a0 <USB_Device_ProcessControlPacket+0x90>
    1080:	80 91 b1 02 	lds	r24, 0x02B1
    1084:	80 93 e9 00 	sts	0x00E9, r24
    1088:	80 91 eb 00 	lds	r24, 0x00EB
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	25 e0       	ldi	r18, 0x05	; 5
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	2a 95       	dec	r18
    1096:	e1 f7       	brne	.-8      	; 0x1090 <USB_Device_ProcessControlPacket+0x80>
    1098:	98 2f       	mov	r25, r24
    109a:	91 70       	andi	r25, 0x01	; 1
    109c:	10 92 e9 00 	sts	0x00E9, r1
    10a0:	80 91 e8 00 	lds	r24, 0x00E8
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	80 93 e8 00 	sts	0x00E8, r24
    10aa:	90 93 f1 00 	sts	0x00F1, r25
    10ae:	10 92 f1 00 	sts	0x00F1, r1
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
    10b6:	98 2f       	mov	r25, r24
    10b8:	9e 7f       	andi	r25, 0xFE	; 254
    10ba:	90 93 e8 00 	sts	0x00E8, r25
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	80 93 e8 00 	sts	0x00E8, r24
    10c4:	80 91 e8 00 	lds	r24, 0x00E8
    10c8:	82 ff       	sbrs	r24, 2
    10ca:	fc cf       	rjmp	.-8      	; 0x10c4 <USB_Device_ProcessControlPacket+0xb4>
    10cc:	f9 c0       	rjmp	.+498    	; 0x12c0 <USB_Device_ProcessControlPacket+0x2b0>
    10ce:	88 23       	and	r24, r24
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <USB_Device_ProcessControlPacket+0xc8>
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <USB_Device_ProcessControlPacket+0xc8>
    10d6:	1d c1       	rjmp	.+570    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	8f 71       	andi	r24, 0x1F	; 31
    10dc:	90 70       	andi	r25, 0x00	; 0
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <USB_Device_ProcessControlPacket+0xd8>
    10e2:	02 97       	sbiw	r24, 0x02	; 2
    10e4:	b9 f5       	brne	.+110    	; 0x1154 <USB_Device_ProcessControlPacket+0x144>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <USB_Device_ProcessControlPacket+0xf0>
    10e8:	80 91 af 02 	lds	r24, 0x02AF
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <USB_Device_ProcessControlPacket+0xe2>
    10f0:	11 c1       	rjmp	.+546    	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    10f2:	10 92 a9 02 	sts	0x02A9, r1
    10f6:	33 30       	cpi	r19, 0x03	; 3
    10f8:	69 f5       	brne	.+90     	; 0x1154 <USB_Device_ProcessControlPacket+0x144>
    10fa:	80 93 a9 02 	sts	0x02A9, r24
    10fe:	2a c0       	rjmp	.+84     	; 0x1154 <USB_Device_ProcessControlPacket+0x144>
    1100:	80 91 af 02 	lds	r24, 0x02AF
    1104:	88 23       	and	r24, r24
    1106:	31 f5       	brne	.+76     	; 0x1154 <USB_Device_ProcessControlPacket+0x144>
    1108:	20 91 b1 02 	lds	r18, 0x02B1
    110c:	27 70       	andi	r18, 0x07	; 7
    110e:	09 f4       	brne	.+2      	; 0x1112 <USB_Device_ProcessControlPacket+0x102>
    1110:	01 c1       	rjmp	.+514    	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    1112:	20 93 e9 00 	sts	0x00E9, r18
    1116:	80 91 eb 00 	lds	r24, 0x00EB
    111a:	80 ff       	sbrs	r24, 0
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <USB_Device_ProcessControlPacket+0x144>
    111e:	31 30       	cpi	r19, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <USB_Device_ProcessControlPacket+0x13a>
    1122:	80 91 eb 00 	lds	r24, 0x00EB
    1126:	80 61       	ori	r24, 0x10	; 16
    1128:	80 93 eb 00 	sts	0x00EB, r24
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <USB_Device_ProcessControlPacket+0x126>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	2a 95       	dec	r18
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <USB_Device_ProcessControlPacket+0x122>
    113a:	80 93 ea 00 	sts	0x00EA, r24
    113e:	10 92 ea 00 	sts	0x00EA, r1
    1142:	80 91 eb 00 	lds	r24, 0x00EB
    1146:	88 60       	ori	r24, 0x08	; 8
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <USB_Device_ProcessControlPacket+0x140>
    114a:	80 91 eb 00 	lds	r24, 0x00EB
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	80 93 eb 00 	sts	0x00EB, r24
    1154:	10 92 e9 00 	sts	0x00E9, r1
    1158:	80 91 e8 00 	lds	r24, 0x00E8
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	80 93 e8 00 	sts	0x00E8, r24
    1162:	80 91 e8 00 	lds	r24, 0x00E8
    1166:	98 2f       	mov	r25, r24
    1168:	9e 7f       	andi	r25, 0xFE	; 254
    116a:	ae c0       	rjmp	.+348    	; 0x12c8 <USB_Device_ProcessControlPacket+0x2b8>
    116c:	88 23       	and	r24, r24
    116e:	09 f0       	breq	.+2      	; 0x1172 <USB_Device_ProcessControlPacket+0x162>
    1170:	d0 c0       	rjmp	.+416    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    1172:	80 91 e8 00 	lds	r24, 0x00E8
    1176:	87 7f       	andi	r24, 0xF7	; 247
    1178:	80 93 e8 00 	sts	0x00E8, r24
    117c:	80 91 e8 00 	lds	r24, 0x00E8
    1180:	98 2f       	mov	r25, r24
    1182:	9e 7f       	andi	r25, 0xFE	; 254
    1184:	90 93 e8 00 	sts	0x00E8, r25
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	80 93 e8 00 	sts	0x00E8, r24
    118e:	80 91 e8 00 	lds	r24, 0x00E8
    1192:	80 ff       	sbrs	r24, 0
    1194:	fc cf       	rjmp	.-8      	; 0x118e <USB_Device_ProcessControlPacket+0x17e>
    1196:	80 91 af 02 	lds	r24, 0x02AF
    119a:	80 68       	ori	r24, 0x80	; 128
    119c:	80 93 e3 00 	sts	0x00E3, r24
    11a0:	b9 c0       	rjmp	.+370    	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    11a2:	80 58       	subi	r24, 0x80	; 128
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <USB_Device_ProcessControlPacket+0x19a>
    11a8:	b4 c0       	rjmp	.+360    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    11aa:	80 91 af 02 	lds	r24, 0x02AF
    11ae:	90 91 b0 02 	lds	r25, 0x02B0
    11b2:	60 91 b1 02 	lds	r22, 0x02B1
    11b6:	ae 01       	movw	r20, r28
    11b8:	4f 5f       	subi	r20, 0xFF	; 255
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	71 de       	rcall	.-798    	; 0xea0 <CALLBACK_USB_GetDescriptor>
    11be:	9c 01       	movw	r18, r24
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <USB_Device_ProcessControlPacket+0x1b6>
    11c4:	a7 c0       	rjmp	.+334    	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    11c6:	80 91 e8 00 	lds	r24, 0x00E8
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	80 93 e8 00 	sts	0x00E8, r24
    11d0:	80 91 b3 02 	lds	r24, 0x02B3
    11d4:	90 91 b4 02 	lds	r25, 0x02B4
    11d8:	28 17       	cp	r18, r24
    11da:	39 07       	cpc	r19, r25
    11dc:	20 f4       	brcc	.+8      	; 0x11e6 <USB_Device_ProcessControlPacket+0x1d6>
    11de:	30 93 b4 02 	sts	0x02B4, r19
    11e2:	20 93 b3 02 	sts	0x02B3, r18
    11e6:	79 81       	ldd	r23, Y+1	; 0x01
    11e8:	6a 81       	ldd	r22, Y+2	; 0x02
    11ea:	20 91 b3 02 	lds	r18, 0x02B3
    11ee:	30 91 b4 02 	lds	r19, 0x02B4
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	31 c0       	rjmp	.+98     	; 0x1258 <USB_Device_ProcessControlPacket+0x248>
    11f6:	80 91 e8 00 	lds	r24, 0x00E8
    11fa:	82 ff       	sbrs	r24, 2
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <USB_Device_ProcessControlPacket+0x1f8>
    11fe:	30 93 b4 02 	sts	0x02B4, r19
    1202:	20 93 b3 02 	sts	0x02B3, r18
    1206:	5c c0       	rjmp	.+184    	; 0x12c0 <USB_Device_ProcessControlPacket+0x2b0>
    1208:	80 91 e8 00 	lds	r24, 0x00E8
    120c:	80 ff       	sbrs	r24, 0
    120e:	f3 cf       	rjmp	.-26     	; 0x11f6 <USB_Device_ProcessControlPacket+0x1e6>
    1210:	87 2f       	mov	r24, r23
    1212:	96 2f       	mov	r25, r22
    1214:	fc 01       	movw	r30, r24
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <USB_Device_ProcessControlPacket+0x212>
    1218:	84 91       	lpm	r24, Z+
    121a:	80 93 f1 00 	sts	0x00F1, r24
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	9a 01       	movw	r18, r20
    1222:	7e 2f       	mov	r23, r30
    1224:	6f 2f       	mov	r22, r31
    1226:	21 15       	cp	r18, r1
    1228:	31 05       	cpc	r19, r1
    122a:	39 f0       	breq	.+14     	; 0x123a <USB_Device_ProcessControlPacket+0x22a>
    122c:	80 91 f2 00 	lds	r24, 0x00F2
    1230:	a9 01       	movw	r20, r18
    1232:	41 50       	subi	r20, 0x01	; 1
    1234:	50 40       	sbci	r21, 0x00	; 0
    1236:	88 30       	cpi	r24, 0x08	; 8
    1238:	78 f3       	brcs	.-34     	; 0x1218 <USB_Device_ProcessControlPacket+0x208>
    123a:	80 91 f2 00 	lds	r24, 0x00F2
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	09 f4       	brne	.+2      	; 0x1246 <USB_Device_ProcessControlPacket+0x236>
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	80 91 e8 00 	lds	r24, 0x00E8
    124a:	98 2f       	mov	r25, r24
    124c:	9e 7f       	andi	r25, 0xFE	; 254
    124e:	90 93 e8 00 	sts	0x00E8, r25
    1252:	8f 77       	andi	r24, 0x7F	; 127
    1254:	80 93 e8 00 	sts	0x00E8, r24
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	a9 f6       	brne	.-86     	; 0x1208 <USB_Device_ProcessControlPacket+0x1f8>
    125e:	10 92 b4 02 	sts	0x02B4, r1
    1262:	10 92 b3 02 	sts	0x02B3, r1
    1266:	44 23       	and	r20, r20
    1268:	69 f0       	breq	.+26     	; 0x1284 <USB_Device_ProcessControlPacket+0x274>
    126a:	80 91 e8 00 	lds	r24, 0x00E8
    126e:	80 ff       	sbrs	r24, 0
    1270:	fc cf       	rjmp	.-8      	; 0x126a <USB_Device_ProcessControlPacket+0x25a>
    1272:	80 91 e8 00 	lds	r24, 0x00E8
    1276:	98 2f       	mov	r25, r24
    1278:	9e 7f       	andi	r25, 0xFE	; 254
    127a:	90 93 e8 00 	sts	0x00E8, r25
    127e:	8f 77       	andi	r24, 0x7F	; 127
    1280:	80 93 e8 00 	sts	0x00E8, r24
    1284:	80 91 e8 00 	lds	r24, 0x00E8
    1288:	82 ff       	sbrs	r24, 2
    128a:	fc cf       	rjmp	.-8      	; 0x1284 <USB_Device_ProcessControlPacket+0x274>
    128c:	19 c0       	rjmp	.+50     	; 0x12c0 <USB_Device_ProcessControlPacket+0x2b0>
    128e:	80 38       	cpi	r24, 0x80	; 128
    1290:	09 f0       	breq	.+2      	; 0x1294 <USB_Device_ProcessControlPacket+0x284>
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    1294:	80 91 e8 00 	lds	r24, 0x00E8
    1298:	87 7f       	andi	r24, 0xF7	; 247
    129a:	80 93 e8 00 	sts	0x00E8, r24
    129e:	80 91 aa 02 	lds	r24, 0x02AA
    12a2:	80 93 f1 00 	sts	0x00F1, r24
    12a6:	80 91 e8 00 	lds	r24, 0x00E8
    12aa:	98 2f       	mov	r25, r24
    12ac:	9e 7f       	andi	r25, 0xFE	; 254
    12ae:	90 93 e8 00 	sts	0x00E8, r25
    12b2:	8f 77       	andi	r24, 0x7F	; 127
    12b4:	80 93 e8 00 	sts	0x00E8, r24
    12b8:	80 91 e8 00 	lds	r24, 0x00E8
    12bc:	82 ff       	sbrs	r24, 2
    12be:	fc cf       	rjmp	.-8      	; 0x12b8 <USB_Device_ProcessControlPacket+0x2a8>
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	98 2f       	mov	r25, r24
    12c6:	9b 7f       	andi	r25, 0xFB	; 251
    12c8:	90 93 e8 00 	sts	0x00E8, r25
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	80 93 e8 00 	sts	0x00E8, r24
    12d2:	20 c0       	rjmp	.+64     	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    12d4:	88 23       	and	r24, r24
    12d6:	e9 f4       	brne	.+58     	; 0x1312 <USB_Device_ProcessControlPacket+0x302>
    12d8:	30 91 aa 02 	lds	r19, 0x02AA
    12dc:	20 91 af 02 	lds	r18, 0x02AF
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	c0 f4       	brcc	.+48     	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    12e4:	80 91 e8 00 	lds	r24, 0x00E8
    12e8:	87 7f       	andi	r24, 0xF7	; 247
    12ea:	80 93 e8 00 	sts	0x00E8, r24
    12ee:	20 93 aa 02 	sts	0x02AA, r18
    12f2:	80 91 e8 00 	lds	r24, 0x00E8
    12f6:	98 2f       	mov	r25, r24
    12f8:	9e 7f       	andi	r25, 0xFE	; 254
    12fa:	90 93 e8 00 	sts	0x00E8, r25
    12fe:	8f 77       	andi	r24, 0x7F	; 127
    1300:	80 93 e8 00 	sts	0x00E8, r24
    1304:	33 23       	and	r19, r19
    1306:	19 f4       	brne	.+6      	; 0x130e <USB_Device_ProcessControlPacket+0x2fe>
    1308:	22 23       	and	r18, r18
    130a:	09 f0       	breq	.+2      	; 0x130e <USB_Device_ProcessControlPacket+0x2fe>
    130c:	05 d1       	rcall	.+522    	; 0x1518 <USB_Event_Stub>
    130e:	b1 da       	rcall	.-2718   	; 0x872 <EVENT_USB_ConfigurationChanged>
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <USB_Device_ProcessControlPacket+0x304>
    1312:	5d da       	rcall	.-2886   	; 0x7ce <EVENT_USB_UnhandledControlPacket>
    1314:	80 91 e8 00 	lds	r24, 0x00E8
    1318:	83 ff       	sbrs	r24, 3
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <USB_Device_ProcessControlPacket+0x320>
    131c:	80 91 eb 00 	lds	r24, 0x00EB
    1320:	80 62       	ori	r24, 0x20	; 32
    1322:	80 93 eb 00 	sts	0x00EB, r24
    1326:	80 91 e8 00 	lds	r24, 0x00E8
    132a:	87 7f       	andi	r24, 0xF7	; 247
    132c:	80 93 e8 00 	sts	0x00E8, r24
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <Endpoint_ConfigureEndpoint_Prv>:
    133a:	80 93 e9 00 	sts	0x00E9, r24
    133e:	80 91 eb 00 	lds	r24, 0x00EB
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 93 eb 00 	sts	0x00EB, r24
    1348:	10 92 ed 00 	sts	0x00ED, r1
    134c:	60 93 ec 00 	sts	0x00EC, r22
    1350:	40 93 ed 00 	sts	0x00ED, r20
    1354:	80 91 ee 00 	lds	r24, 0x00EE
    1358:	88 1f       	adc	r24, r24
    135a:	88 27       	eor	r24, r24
    135c:	88 1f       	adc	r24, r24
    135e:	08 95       	ret

00001360 <Endpoint_ClearEndpoints>:
    1360:	10 92 f4 00 	sts	0x00F4, r1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	90 93 e9 00 	sts	0x00E9, r25
    136a:	10 92 f0 00 	sts	0x00F0, r1
    136e:	10 92 e8 00 	sts	0x00E8, r1
    1372:	80 91 ed 00 	lds	r24, 0x00ED
    1376:	8d 7f       	andi	r24, 0xFD	; 253
    1378:	80 93 ed 00 	sts	0x00ED, r24
    137c:	80 91 eb 00 	lds	r24, 0x00EB
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	80 93 eb 00 	sts	0x00EB, r24
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	95 30       	cpi	r25, 0x05	; 5
    138a:	69 f7       	brne	.-38     	; 0x1366 <Endpoint_ClearEndpoints+0x6>
    138c:	08 95       	ret

0000138e <Endpoint_Write_Control_Stream_LE>:
    138e:	fc 01       	movw	r30, r24
    1390:	40 91 b3 02 	lds	r20, 0x02B3
    1394:	50 91 b4 02 	lds	r21, 0x02B4
    1398:	9b 01       	movw	r18, r22
    139a:	46 17       	cp	r20, r22
    139c:	57 07       	cpc	r21, r23
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <Endpoint_Write_Control_Stream_LE+0x14>
    13a0:	9a 01       	movw	r18, r20
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <Endpoint_Write_Control_Stream_LE+0x54>
    13a6:	80 91 e8 00 	lds	r24, 0x00E8
    13aa:	80 ff       	sbrs	r24, 0
    13ac:	fc cf       	rjmp	.-8      	; 0x13a6 <Endpoint_Write_Control_Stream_LE+0x18>
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <Endpoint_Write_Control_Stream_LE+0x2e>
    13b0:	81 91       	ld	r24, Z+
    13b2:	80 93 f1 00 	sts	0x00F1, r24
    13b6:	21 50       	subi	r18, 0x01	; 1
    13b8:	30 40       	sbci	r19, 0x00	; 0
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <Endpoint_Write_Control_Stream_LE+0x36>
    13bc:	80 91 f2 00 	lds	r24, 0x00F2
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	b0 f3       	brcs	.-20     	; 0x13b0 <Endpoint_Write_Control_Stream_LE+0x22>
    13c4:	80 91 f2 00 	lds	r24, 0x00F2
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <Endpoint_Write_Control_Stream_LE+0x42>
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	80 91 e8 00 	lds	r24, 0x00E8
    13d4:	98 2f       	mov	r25, r24
    13d6:	9e 7f       	andi	r25, 0xFE	; 254
    13d8:	90 93 e8 00 	sts	0x00E8, r25
    13dc:	8f 77       	andi	r24, 0x7F	; 127
    13de:	80 93 e8 00 	sts	0x00E8, r24
    13e2:	21 15       	cp	r18, r1
    13e4:	31 05       	cpc	r19, r1
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <Endpoint_Write_Control_Stream_LE+0x62>
    13e8:	80 91 e8 00 	lds	r24, 0x00E8
    13ec:	82 ff       	sbrs	r24, 2
    13ee:	db cf       	rjmp	.-74     	; 0x13a6 <Endpoint_Write_Control_Stream_LE+0x18>
    13f0:	80 91 e8 00 	lds	r24, 0x00E8
    13f4:	82 ff       	sbrs	r24, 2
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <Endpoint_Write_Control_Stream_LE+0x6e>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	08 95       	ret
    13fc:	44 23       	and	r20, r20
    13fe:	69 f0       	breq	.+26     	; 0x141a <Endpoint_Write_Control_Stream_LE+0x8c>
    1400:	80 91 e8 00 	lds	r24, 0x00E8
    1404:	80 ff       	sbrs	r24, 0
    1406:	fc cf       	rjmp	.-8      	; 0x1400 <Endpoint_Write_Control_Stream_LE+0x72>
    1408:	80 91 e8 00 	lds	r24, 0x00E8
    140c:	98 2f       	mov	r25, r24
    140e:	9e 7f       	andi	r25, 0xFE	; 254
    1410:	90 93 e8 00 	sts	0x00E8, r25
    1414:	8f 77       	andi	r24, 0x7F	; 127
    1416:	80 93 e8 00 	sts	0x00E8, r24
    141a:	80 91 e8 00 	lds	r24, 0x00E8
    141e:	82 ff       	sbrs	r24, 2
    1420:	fc cf       	rjmp	.-8      	; 0x141a <Endpoint_Write_Control_Stream_LE+0x8c>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret

00001426 <Endpoint_Read_Control_Stream_LE>:
    1426:	fc 01       	movw	r30, r24
    1428:	18 c0       	rjmp	.+48     	; 0x145a <Endpoint_Read_Control_Stream_LE+0x34>
    142a:	80 91 e8 00 	lds	r24, 0x00E8
    142e:	82 ff       	sbrs	r24, 2
    1430:	fc cf       	rjmp	.-8      	; 0x142a <Endpoint_Read_Control_Stream_LE+0x4>
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <Endpoint_Read_Control_Stream_LE+0x1a>
    1434:	80 91 f1 00 	lds	r24, 0x00F1
    1438:	81 93       	st	Z+, r24
    143a:	61 50       	subi	r22, 0x01	; 1
    143c:	70 40       	sbci	r23, 0x00	; 0
    143e:	21 f0       	breq	.+8      	; 0x1448 <Endpoint_Read_Control_Stream_LE+0x22>
    1440:	80 91 f2 00 	lds	r24, 0x00F2
    1444:	88 23       	and	r24, r24
    1446:	b1 f7       	brne	.-20     	; 0x1434 <Endpoint_Read_Control_Stream_LE+0xe>
    1448:	80 91 e8 00 	lds	r24, 0x00E8
    144c:	98 2f       	mov	r25, r24
    144e:	9b 7f       	andi	r25, 0xFB	; 251
    1450:	90 93 e8 00 	sts	0x00E8, r25
    1454:	8f 77       	andi	r24, 0x7F	; 127
    1456:	80 93 e8 00 	sts	0x00E8, r24
    145a:	61 15       	cp	r22, r1
    145c:	71 05       	cpc	r23, r1
    145e:	29 f7       	brne	.-54     	; 0x142a <Endpoint_Read_Control_Stream_LE+0x4>
    1460:	80 91 e8 00 	lds	r24, 0x00E8
    1464:	80 ff       	sbrs	r24, 0
    1466:	fc cf       	rjmp	.-8      	; 0x1460 <Endpoint_Read_Control_Stream_LE+0x3a>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	08 95       	ret

0000146c <USB_ResetInterface>:
    146c:	56 d0       	rcall	.+172    	; 0x151a <USB_INT_DisableAllInterrupts>
    146e:	58 d0       	rcall	.+176    	; 0x1520 <USB_INT_ClearAllInterrupts>
    1470:	10 92 ac 02 	sts	0x02AC, r1
    1474:	10 92 aa 02 	sts	0x02AA, r1
    1478:	10 92 b5 02 	sts	0x02B5, r1
    147c:	10 92 a9 02 	sts	0x02A9, r1
    1480:	10 92 a8 02 	sts	0x02A8, r1
    1484:	19 bc       	out	0x29, r1	; 41
    1486:	89 b5       	in	r24, 0x29	; 41
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	89 bd       	out	0x29, r24	; 41
    148c:	09 b4       	in	r0, 0x29	; 41
    148e:	00 fe       	sbrs	r0, 0
    1490:	fd cf       	rjmp	.-6      	; 0x148c <USB_ResetInterface+0x20>
    1492:	80 91 d8 00 	lds	r24, 0x00D8
    1496:	98 2f       	mov	r25, r24
    1498:	9f 77       	andi	r25, 0x7F	; 127
    149a:	90 93 d8 00 	sts	0x00D8, r25
    149e:	80 68       	ori	r24, 0x80	; 128
    14a0:	80 93 d8 00 	sts	0x00D8, r24
    14a4:	80 91 63 00 	lds	r24, 0x0063
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	80 93 63 00 	sts	0x0063, r24
    14ae:	80 91 d8 00 	lds	r24, 0x00D8
    14b2:	8f 7d       	andi	r24, 0xDF	; 223
    14b4:	80 93 d8 00 	sts	0x00D8, r24
    14b8:	80 91 e0 00 	lds	r24, 0x00E0
    14bc:	8e 7f       	andi	r24, 0xFE	; 254
    14be:	80 93 e0 00 	sts	0x00E0, r24
    14c2:	80 91 e2 00 	lds	r24, 0x00E2
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	80 93 e2 00 	sts	0x00E2, r24
    14cc:	80 91 e2 00 	lds	r24, 0x00E2
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	80 93 e2 00 	sts	0x00E2, r24
    14d6:	08 95       	ret

000014d8 <USB_ShutDown>:
    14d8:	80 91 ac 02 	lds	r24, 0x02AC
    14dc:	88 23       	and	r24, r24
    14de:	09 f0       	breq	.+2      	; 0x14e2 <USB_ShutDown+0xa>
    14e0:	e0 d9       	rcall	.-3136   	; 0x8a2 <EVENT_USB_Disconnect>
    14e2:	80 91 e0 00 	lds	r24, 0x00E0
    14e6:	81 60       	ori	r24, 0x01	; 1
    14e8:	80 93 e0 00 	sts	0x00E0, r24
    14ec:	16 d0       	rcall	.+44     	; 0x151a <USB_INT_DisableAllInterrupts>
    14ee:	18 d0       	rcall	.+48     	; 0x1520 <USB_INT_ClearAllInterrupts>
    14f0:	10 92 ac 02 	sts	0x02AC, r1
    14f4:	10 92 ab 02 	sts	0x02AB, r1
    14f8:	10 92 aa 02 	sts	0x02AA, r1
    14fc:	80 91 d8 00 	lds	r24, 0x00D8
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	80 93 d8 00 	sts	0x00D8, r24
    1506:	19 bc       	out	0x29, r1	; 41
    1508:	08 95       	ret

0000150a <USB_Init>:
    150a:	e6 df       	rcall	.-52     	; 0x14d8 <USB_ShutDown>
    150c:	af df       	rcall	.-162    	; 0x146c <USB_ResetInterface>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 ab 02 	sts	0x02AB, r24
    1514:	78 94       	sei
    1516:	08 95       	ret

00001518 <USB_Event_Stub>:
    1518:	08 95       	ret

0000151a <USB_INT_DisableAllInterrupts>:
    151a:	10 92 e2 00 	sts	0x00E2, r1
    151e:	08 95       	ret

00001520 <USB_INT_ClearAllInterrupts>:
    1520:	10 92 e1 00 	sts	0x00E1, r1
    1524:	08 95       	ret

00001526 <__vector_11>:
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	80 91 e1 00 	lds	r24, 0x00E1
    154c:	80 ff       	sbrs	r24, 0
    154e:	24 c0       	rjmp	.+72     	; 0x1598 <__vector_11+0x72>
    1550:	80 91 e2 00 	lds	r24, 0x00E2
    1554:	80 ff       	sbrs	r24, 0
    1556:	20 c0       	rjmp	.+64     	; 0x1598 <__vector_11+0x72>
    1558:	80 91 e1 00 	lds	r24, 0x00E1
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	80 93 e1 00 	sts	0x00E1, r24
    1562:	80 91 e2 00 	lds	r24, 0x00E2
    1566:	8e 7f       	andi	r24, 0xFE	; 254
    1568:	80 93 e2 00 	sts	0x00E2, r24
    156c:	80 91 e2 00 	lds	r24, 0x00E2
    1570:	80 61       	ori	r24, 0x10	; 16
    1572:	80 93 e2 00 	sts	0x00E2, r24
    1576:	80 91 d8 00 	lds	r24, 0x00D8
    157a:	80 62       	ori	r24, 0x20	; 32
    157c:	80 93 d8 00 	sts	0x00D8, r24
    1580:	19 bc       	out	0x29, r1	; 41
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 b5 02 	sts	0x02B5, r24
    1588:	c7 df       	rcall	.-114    	; 0x1518 <USB_Event_Stub>
    158a:	80 91 ac 02 	lds	r24, 0x02AC
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <__vector_11+0x72>
    1592:	10 92 ac 02 	sts	0x02AC, r1
    1596:	85 d9       	rcall	.-3318   	; 0x8a2 <EVENT_USB_Disconnect>
    1598:	80 91 e1 00 	lds	r24, 0x00E1
    159c:	84 ff       	sbrs	r24, 4
    159e:	2a c0       	rjmp	.+84     	; 0x15f4 <__vector_11+0xce>
    15a0:	80 91 e2 00 	lds	r24, 0x00E2
    15a4:	84 ff       	sbrs	r24, 4
    15a6:	26 c0       	rjmp	.+76     	; 0x15f4 <__vector_11+0xce>
    15a8:	19 bc       	out	0x29, r1	; 41
    15aa:	89 b5       	in	r24, 0x29	; 41
    15ac:	82 60       	ori	r24, 0x02	; 2
    15ae:	89 bd       	out	0x29, r24	; 41
    15b0:	09 b4       	in	r0, 0x29	; 41
    15b2:	00 fe       	sbrs	r0, 0
    15b4:	fd cf       	rjmp	.-6      	; 0x15b0 <__vector_11+0x8a>
    15b6:	80 91 d8 00 	lds	r24, 0x00D8
    15ba:	8f 7d       	andi	r24, 0xDF	; 223
    15bc:	80 93 d8 00 	sts	0x00D8, r24
    15c0:	80 91 e1 00 	lds	r24, 0x00E1
    15c4:	8f 7e       	andi	r24, 0xEF	; 239
    15c6:	80 93 e1 00 	sts	0x00E1, r24
    15ca:	80 91 e2 00 	lds	r24, 0x00E2
    15ce:	8f 7e       	andi	r24, 0xEF	; 239
    15d0:	80 93 e2 00 	sts	0x00E2, r24
    15d4:	80 91 e2 00 	lds	r24, 0x00E2
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	80 93 e2 00 	sts	0x00E2, r24
    15de:	80 91 ac 02 	lds	r24, 0x02AC
    15e2:	88 23       	and	r24, r24
    15e4:	21 f4       	brne	.+8      	; 0x15ee <__vector_11+0xc8>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 ac 02 	sts	0x02AC, r24
    15ec:	56 d9       	rcall	.-3412   	; 0x89a <EVENT_USB_Connect>
    15ee:	10 92 b5 02 	sts	0x02B5, r1
    15f2:	92 df       	rcall	.-220    	; 0x1518 <USB_Event_Stub>
    15f4:	80 91 e1 00 	lds	r24, 0x00E1
    15f8:	83 ff       	sbrs	r24, 3
    15fa:	20 c0       	rjmp	.+64     	; 0x163c <__vector_11+0x116>
    15fc:	80 91 e2 00 	lds	r24, 0x00E2
    1600:	83 ff       	sbrs	r24, 3
    1602:	1c c0       	rjmp	.+56     	; 0x163c <__vector_11+0x116>
    1604:	80 91 e1 00 	lds	r24, 0x00E1
    1608:	87 7f       	andi	r24, 0xF7	; 247
    160a:	80 93 e1 00 	sts	0x00E1, r24
    160e:	10 92 aa 02 	sts	0x02AA, r1
    1612:	80 91 e1 00 	lds	r24, 0x00E1
    1616:	8e 7f       	andi	r24, 0xFE	; 254
    1618:	80 93 e1 00 	sts	0x00E1, r24
    161c:	80 91 e2 00 	lds	r24, 0x00E2
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	80 93 e2 00 	sts	0x00E2, r24
    1626:	80 91 e2 00 	lds	r24, 0x00E2
    162a:	80 61       	ori	r24, 0x10	; 16
    162c:	80 93 e2 00 	sts	0x00E2, r24
    1630:	97 de       	rcall	.-722    	; 0x1360 <Endpoint_ClearEndpoints>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	42 e0       	ldi	r20, 0x02	; 2
    1638:	80 de       	rcall	.-768    	; 0x133a <Endpoint_ConfigureEndpoint_Prv>
    163a:	6e df       	rcall	.-292    	; 0x1518 <USB_Event_Stub>
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <USB_USBTask>:
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	80 91 ac 02 	lds	r24, 0x02AC
    1666:	88 23       	and	r24, r24
    1668:	79 f0       	breq	.+30     	; 0x1688 <USB_USBTask+0x2a>
    166a:	00 91 e9 00 	lds	r16, 0x00E9
    166e:	10 92 e9 00 	sts	0x00E9, r1
    1672:	80 91 e8 00 	lds	r24, 0x00E8
    1676:	83 ff       	sbrs	r24, 3
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <USB_USBTask+0x24>
    167a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    167c:	f8 94       	cli
    167e:	c8 dc       	rcall	.-1648   	; 0x1010 <USB_Device_ProcessControlPacket>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1680:	1f bf       	out	0x3f, r17	; 63
    1682:	07 70       	andi	r16, 0x07	; 7
    1684:	00 93 e9 00 	sts	0x00E9, r16
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <__mulhi3>:
    168e:	55 27       	eor	r21, r21
    1690:	00 24       	eor	r0, r0

00001692 <__mulhi3_loop>:
    1692:	80 ff       	sbrs	r24, 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <__mulhi3_skip1>
    1696:	06 0e       	add	r0, r22
    1698:	57 1f       	adc	r21, r23

0000169a <__mulhi3_skip1>:
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	61 15       	cp	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	21 f0       	breq	.+8      	; 0x16ac <__mulhi3_exit>
    16a4:	96 95       	lsr	r25
    16a6:	87 95       	ror	r24
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	99 f7       	brne	.-26     	; 0x1692 <__mulhi3_loop>

000016ac <__mulhi3_exit>:
    16ac:	95 2f       	mov	r25, r21
    16ae:	80 2d       	mov	r24, r0
    16b0:	08 95       	ret

000016b2 <__udivmodqi4>:
    16b2:	99 1b       	sub	r25, r25
    16b4:	79 e0       	ldi	r23, 0x09	; 9
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <__udivmodqi4_ep>

000016b8 <__udivmodqi4_loop>:
    16b8:	99 1f       	adc	r25, r25
    16ba:	96 17       	cp	r25, r22
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <__udivmodqi4_ep>
    16be:	96 1b       	sub	r25, r22

000016c0 <__udivmodqi4_ep>:
    16c0:	88 1f       	adc	r24, r24
    16c2:	7a 95       	dec	r23
    16c4:	c9 f7       	brne	.-14     	; 0x16b8 <__udivmodqi4_loop>
    16c6:	80 95       	com	r24
    16c8:	08 95       	ret

000016ca <_exit>:
    16ca:	f8 94       	cli

000016cc <__stop_program>:
    16cc:	ff cf       	rjmp	.-2      	; 0x16cc <__stop_program>
